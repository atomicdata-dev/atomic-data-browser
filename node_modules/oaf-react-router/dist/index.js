"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var oaf_routing_1 = require("oaf-routing");
exports.defaultSettings = __assign({}, oaf_routing_1.defaultSettings);
// HACK we need a way to track where focus and scroll were left on the first loaded page
// but we won't have an entry in history for this initial page, so we just make up a key.
var orInitialKey = function (key) {
    return key !== undefined ? key : "initial";
};
exports.wrapHistory = function (history, settingsOverrides) {
    var settings = __assign(__assign({}, exports.defaultSettings), settingsOverrides);
    var oafRouter = oaf_routing_1.createOafRouter(settings, function (location) { return location.hash; });
    var initialLocation = history.location;
    // HACK: We use setTimeout to give React a chance to render before we repair focus.
    setTimeout(function () {
        oafRouter.handleFirstPageLoad(initialLocation);
    }, settings.renderTimeout);
    // tslint:disable-next-line: no-let
    var previousLocation = initialLocation;
    var unlisten = history.listen(function (location, action) {
        // We're the first subscribed listener, so the DOM won't have been updated yet.
        oafRouter.handleLocationWillChange(orInitialKey(previousLocation.key), orInitialKey(location.key), action);
        // HACK: We use setTimeout to give React a chance to render before we repair focus.
        var stablePreviousLocation = previousLocation;
        setTimeout(function () {
            oafRouter.handleLocationChanged(stablePreviousLocation, location, orInitialKey(location.key), action);
        }, settings.renderTimeout);
        previousLocation = location;
    });
    return function () {
        oafRouter.resetAutoScrollRestoration();
        unlisten();
    };
};
