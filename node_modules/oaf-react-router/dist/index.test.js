"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var history_1 = require("history");
var _1 = require(".");
// tslint:disable-next-line: no-commented-code
// tslint:disable: no-expression-statement
// tslint:disable: object-literal-sort-keys
// tslint:disable: no-duplicate-string
// tslint:disable: no-object-mutation
// HACK: wait for history wrapper to update DOM.
var waitForDomUpdate = function () { return new Promise(function (resolve) { return setTimeout(resolve); }); };
beforeEach(function () {
    // Clear previous test's DOM.
    window.document.body.innerHTML = "";
    window.document.title = "";
});
describe("oaf-react-router", function () {
    test("doesn't throw when wrapping and unwrapping history", function () {
        var history = history_1.createBrowserHistory();
        var unwrap = _1.wrapHistory(history);
        unwrap();
    });
    test("sets the document title", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    history = history_1.createBrowserHistory();
                    _1.wrapHistory(history, {
                        setPageTitle: true,
                        documentTitle: function () { return "test title"; },
                    });
                    expect(document.title).toBe("");
                    history.push("/");
                    return [4 /*yield*/, waitForDomUpdate()];
                case 1:
                    _a.sent();
                    expect(document.title).toBe("test title");
                    return [2 /*return*/];
            }
        });
    }); });
    test("does not set the document title when setPageTitle is false", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    history = history_1.createBrowserHistory();
                    _1.wrapHistory(history, {
                        setPageTitle: false,
                        documentTitle: function () { return "test title"; },
                    });
                    expect(document.title).toBe("");
                    history.push("/");
                    return [4 /*yield*/, waitForDomUpdate()];
                case 1:
                    _a.sent();
                    expect(document.title).toBe("");
                    return [2 /*return*/];
            }
        });
    }); });
    test("leaves focus alone when repairFocus is false", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history, main, mainH1, randomButton;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    history = history_1.createBrowserHistory();
                    _1.wrapHistory(history, { repairFocus: false });
                    main = document.createElement("main");
                    mainH1 = document.createElement("h1");
                    main.append(mainH1);
                    randomButton = document.createElement("button");
                    main.append(randomButton);
                    document.body.append(main);
                    randomButton.focus();
                    expect(document.activeElement).toBe(randomButton);
                    history.push("/");
                    return [4 /*yield*/, waitForDomUpdate()];
                case 1:
                    _a.sent();
                    expect(document.activeElement).toBe(randomButton);
                    return [2 /*return*/];
            }
        });
    }); });
    test("moves focus to body when primary focus target cannot be focused", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history, main, mainH1, randomButton;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    history = history_1.createBrowserHistory();
                    _1.wrapHistory(history);
                    main = document.createElement("main");
                    mainH1 = document.createElement("h1");
                    // tslint:disable-next-line: no-empty
                    mainH1.focus = function () { };
                    main.append(mainH1);
                    randomButton = document.createElement("button");
                    main.append(randomButton);
                    document.body.append(main);
                    randomButton.focus();
                    expect(document.activeElement).toBe(randomButton);
                    history.push("/");
                    return [4 /*yield*/, waitForDomUpdate()];
                case 1:
                    _a.sent();
                    expect([document.body, document.documentElement]).toContain(document.activeElement);
                    return [2 /*return*/];
            }
        });
    }); });
    test("moves focus to the primary focus target", function () { return __awaiter(void 0, void 0, void 0, function () {
        var history, main, mainH1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    history = history_1.createBrowserHistory();
                    _1.wrapHistory(history);
                    main = document.createElement("main");
                    mainH1 = document.createElement("h1");
                    main.append(mainH1);
                    document.body.append(main);
                    expect([document.body, document.documentElement]).toContain(document.activeElement);
                    history.push("/");
                    return [4 /*yield*/, waitForDomUpdate()];
                case 1:
                    _a.sent();
                    expect(document.activeElement).toBe(mainH1);
                    return [2 /*return*/];
            }
        });
    }); });
});
