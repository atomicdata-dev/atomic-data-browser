"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPageStateMemory = () => {
    // TODO constrain the size of these collections?
    // TODO persist these?
    const locations = new Array();
    const pageStateMap = new Map();
    const shouldHandleActionMap = new Map();
    const purgeStateForKey = (key) => {
        if (key !== undefined) {
            pageStateMap.delete(key);
            shouldHandleActionMap.delete(key);
        }
    };
    return {
        getPageState: (key) => {
            return pageStateMap.get(key);
        },
        setPageState: (key, pageState) => {
            pageStateMap.set(key, pageState);
            return;
        },
        handlePushAction: (previousLocationKey, nextLocationKey) => {
            const desiredLocationsLength = previousLocationKey !== undefined
                ? locations.indexOf(previousLocationKey) + 1
                : 0;
            while (locations.length > desiredLocationsLength) {
                const key = locations.pop();
                purgeStateForKey(key);
            }
            locations.push(nextLocationKey);
            return;
        },
        handleReplaceAction: (previousLocationKey, nextLocationKey) => {
            const indexToReplace = locations.indexOf(previousLocationKey);
            if (indexToReplace !== -1) {
                // tslint:disable-next-line: no-object-mutation
                locations[indexToReplace] = nextLocationKey;
            }
            purgeStateForKey(previousLocationKey);
        },
        getShouldHandleAction: (key) => {
            return shouldHandleActionMap.get(key);
        },
        setShouldHandleAction: (key, shouldHandleAction) => {
            shouldHandleActionMap.set(key, shouldHandleAction);
            return;
        },
    };
};
