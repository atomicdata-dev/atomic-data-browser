"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _chokidar = _interopRequireDefault(require("./chokidar"));

var _logger = require("../../logger");

var _eslint = _interopRequireDefault(require("../../eslint"));

var _keyListener = _interopRequireDefault(require("./key-listener"));

var _clear = _interopRequireDefault(require("../../commands/clear"));

var _options = _interopRequireDefault(require("../../cli/options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.createLogger)('events:watch');

async function lint(options = {}, eslintArgs = []) {
  if (options.clear) {
    /* istanbul ignore next */
    logger.log(_clear.default.run());
  }

  await _eslint.default.lint(eslintArgs, options);
}

var _default = {
  listen(opts) {
    const watcher = _chokidar.default.createWatcher(opts._, {
      ignored: opts.watchIgnore
    });

    const {
      flags,
      dirs
    } = _options.default.getCli(opts);

    const cacheLocation = _path.default.relative(process.cwd(), _path.default.resolve(opts.cacheLocation || '.eslintcache'));

    _keyListener.default.listen(['enter'], async () => {
      await lint(opts, [...flags, ...dirs]);
    });

    return watcher.on('ready', async () => {
      logger.debug('Ready');
      await lint(opts, [...flags, ...dirs]);
    })
    /* istanbul ignore next */
    .on('add', dir => logger.debug(`${dir} added.`)).on('change', (0, _lodash.default)(async filePath => {
      if (cacheLocation === filePath) return;

      if (!opts.ext.includes(_path.default.extname(filePath))) {
        logger.debug(`Watch: Skipping ${filePath}`);
        return;
      }

      logger.debug('Detected change:', filePath);
      const changed = opts.changed ? [filePath] : opts._;
      await lint(opts, [...flags, ...changed]);
    }, opts.watchDelay || 300))
    /* istanbul ignore next */
    .on('error', err => logger.error(err));
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvd2F0Y2gvaW5kZXguanMiXSwibmFtZXMiOlsibG9nZ2VyIiwibGludCIsIm9wdGlvbnMiLCJlc2xpbnRBcmdzIiwiY2xlYXIiLCJsb2ciLCJydW4iLCJlc2xpbnQiLCJsaXN0ZW4iLCJvcHRzIiwid2F0Y2hlciIsIndhdGNoIiwiY3JlYXRlV2F0Y2hlciIsIl8iLCJpZ25vcmVkIiwid2F0Y2hJZ25vcmUiLCJmbGFncyIsImRpcnMiLCJjbGkiLCJnZXRDbGkiLCJjYWNoZUxvY2F0aW9uIiwicGF0aCIsInJlbGF0aXZlIiwicHJvY2VzcyIsImN3ZCIsInJlc29sdmUiLCJrZXkiLCJvbiIsImRlYnVnIiwiZGlyIiwiZmlsZVBhdGgiLCJleHQiLCJpbmNsdWRlcyIsImV4dG5hbWUiLCJjaGFuZ2VkIiwid2F0Y2hEZWxheSIsImVyciIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUcsMEJBQWEsY0FBYixDQUFmOztBQUVBLGVBQWVDLElBQWYsQ0FBb0JDLE9BQU8sR0FBRyxFQUE5QixFQUFrQ0MsVUFBVSxHQUFHLEVBQS9DLEVBQW1EO0FBQ2pELE1BQUlELE9BQU8sQ0FBQ0UsS0FBWixFQUFtQjtBQUNqQjtBQUNBSixJQUFBQSxNQUFNLENBQUNLLEdBQVAsQ0FBV0QsZUFBTUUsR0FBTixFQUFYO0FBQ0Q7O0FBRUQsUUFBTUMsZ0JBQU9OLElBQVAsQ0FBWUUsVUFBWixFQUF3QkQsT0FBeEIsQ0FBTjtBQUNEOztlQUVjO0FBQ2JNLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBRCxFQUFPO0FBQ1gsVUFBTUMsT0FBTyxHQUFHQyxrQkFBTUMsYUFBTixDQUFvQkgsSUFBSSxDQUFDSSxDQUF6QixFQUE0QjtBQUFFQyxNQUFBQSxPQUFPLEVBQUVMLElBQUksQ0FBQ007QUFBaEIsS0FBNUIsQ0FBaEI7O0FBQ0EsVUFBTTtBQUFFQyxNQUFBQSxLQUFGO0FBQVNDLE1BQUFBO0FBQVQsUUFBa0JDLGlCQUFJQyxNQUFKLENBQVdWLElBQVgsQ0FBeEI7O0FBQ0EsVUFBTVcsYUFBYSxHQUFHQyxjQUFLQyxRQUFMLENBQWNDLE9BQU8sQ0FBQ0MsR0FBUixFQUFkLEVBQTZCSCxjQUFLSSxPQUFMLENBQWFoQixJQUFJLENBQUNXLGFBQUwsSUFBc0IsY0FBbkMsQ0FBN0IsQ0FBdEI7O0FBRUFNLHlCQUFJbEIsTUFBSixDQUFXLENBQUMsT0FBRCxDQUFYLEVBQXNCLFlBQVk7QUFDaEMsWUFBTVAsSUFBSSxDQUFDUSxJQUFELEVBQU8sQ0FBQyxHQUFHTyxLQUFKLEVBQVcsR0FBR0MsSUFBZCxDQUFQLENBQVY7QUFDRCxLQUZEOztBQUlBLFdBQ0VQLE9BQU8sQ0FDSmlCLEVBREgsQ0FDTSxPQUROLEVBQ2UsWUFBWTtBQUN2QjNCLE1BQUFBLE1BQU0sQ0FBQzRCLEtBQVAsQ0FBYSxPQUFiO0FBQ0EsWUFBTTNCLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR08sS0FBSixFQUFXLEdBQUdDLElBQWQsQ0FBUCxDQUFWO0FBQ0QsS0FKSDtBQUtFO0FBTEYsS0FNR1UsRUFOSCxDQU1NLEtBTk4sRUFNY0UsR0FBRCxJQUFTN0IsTUFBTSxDQUFDNEIsS0FBUCxDQUFjLEdBQUVDLEdBQUksU0FBcEIsQ0FOdEIsRUFPR0YsRUFQSCxDQVFJLFFBUkosRUFTSSxxQkFBUyxNQUFPRyxRQUFQLElBQW9CO0FBQzNCLFVBQUlWLGFBQWEsS0FBS1UsUUFBdEIsRUFBZ0M7O0FBQ2hDLFVBQUksQ0FBQ3JCLElBQUksQ0FBQ3NCLEdBQUwsQ0FBU0MsUUFBVCxDQUFrQlgsY0FBS1ksT0FBTCxDQUFhSCxRQUFiLENBQWxCLENBQUwsRUFBZ0Q7QUFDOUM5QixRQUFBQSxNQUFNLENBQUM0QixLQUFQLENBQWMsbUJBQWtCRSxRQUFTLEVBQXpDO0FBQ0E7QUFDRDs7QUFFRDlCLE1BQUFBLE1BQU0sQ0FBQzRCLEtBQVAsQ0FBYSxrQkFBYixFQUFpQ0UsUUFBakM7QUFDQSxZQUFNSSxPQUFPLEdBQUd6QixJQUFJLENBQUN5QixPQUFMLEdBQWUsQ0FBQ0osUUFBRCxDQUFmLEdBQTRCckIsSUFBSSxDQUFDSSxDQUFqRDtBQUVBLFlBQU1aLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR08sS0FBSixFQUFXLEdBQUdrQixPQUFkLENBQVAsQ0FBVjtBQUNELEtBWEQsRUFXR3pCLElBQUksQ0FBQzBCLFVBQUwsSUFBbUIsR0FYdEIsQ0FUSjtBQXNCRTtBQXRCRixLQXVCR1IsRUF2QkgsQ0F1Qk0sT0F2Qk4sRUF1QmdCUyxHQUFELElBQVNwQyxNQUFNLENBQUNxQyxLQUFQLENBQWFELEdBQWIsQ0F2QnhCLENBREY7QUEwQkQ7O0FBcENZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuXG5pbXBvcnQgd2F0Y2ggZnJvbSAnLi9jaG9raWRhcic7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXInO1xuaW1wb3J0IGVzbGludCBmcm9tICcuLi8uLi9lc2xpbnQnO1xuaW1wb3J0IGtleSBmcm9tICcuL2tleS1saXN0ZW5lcic7XG5pbXBvcnQgY2xlYXIgZnJvbSAnLi4vLi4vY29tbWFuZHMvY2xlYXInO1xuaW1wb3J0IGNsaSBmcm9tICcuLi8uLi9jbGkvb3B0aW9ucyc7XG5cbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcignZXZlbnRzOndhdGNoJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGxpbnQob3B0aW9ucyA9IHt9LCBlc2xpbnRBcmdzID0gW10pIHtcbiAgaWYgKG9wdGlvbnMuY2xlYXIpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGxvZ2dlci5sb2coY2xlYXIucnVuKCkpO1xuICB9XG5cbiAgYXdhaXQgZXNsaW50LmxpbnQoZXNsaW50QXJncywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbGlzdGVuKG9wdHMpIHtcbiAgICBjb25zdCB3YXRjaGVyID0gd2F0Y2guY3JlYXRlV2F0Y2hlcihvcHRzLl8sIHsgaWdub3JlZDogb3B0cy53YXRjaElnbm9yZSB9KTtcbiAgICBjb25zdCB7IGZsYWdzLCBkaXJzIH0gPSBjbGkuZ2V0Q2xpKG9wdHMpO1xuICAgIGNvbnN0IGNhY2hlTG9jYXRpb24gPSBwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIHBhdGgucmVzb2x2ZShvcHRzLmNhY2hlTG9jYXRpb24gfHwgJy5lc2xpbnRjYWNoZScpKTtcblxuICAgIGtleS5saXN0ZW4oWydlbnRlciddLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uZGlyc10pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHdhdGNoZXJcbiAgICAgICAgLm9uKCdyZWFkeScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ1JlYWR5Jyk7XG4gICAgICAgICAgYXdhaXQgbGludChvcHRzLCBbLi4uZmxhZ3MsIC4uLmRpcnNdKTtcbiAgICAgICAgfSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgLm9uKCdhZGQnLCAoZGlyKSA9PiBsb2dnZXIuZGVidWcoYCR7ZGlyfSBhZGRlZC5gKSlcbiAgICAgICAgLm9uKFxuICAgICAgICAgICdjaGFuZ2UnLFxuICAgICAgICAgIGRlYm91bmNlKGFzeW5jIChmaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhY2hlTG9jYXRpb24gPT09IGZpbGVQYXRoKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIW9wdHMuZXh0LmluY2x1ZGVzKHBhdGguZXh0bmFtZShmaWxlUGF0aCkpKSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgV2F0Y2g6IFNraXBwaW5nICR7ZmlsZVBhdGh9YCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdEZXRlY3RlZCBjaGFuZ2U6JywgZmlsZVBhdGgpO1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlZCA9IG9wdHMuY2hhbmdlZCA/IFtmaWxlUGF0aF0gOiBvcHRzLl87XG5cbiAgICAgICAgICAgIGF3YWl0IGxpbnQob3B0cywgWy4uLmZsYWdzLCAuLi5jaGFuZ2VkXSk7XG4gICAgICAgICAgfSwgb3B0cy53YXRjaERlbGF5IHx8IDMwMClcbiAgICAgICAgKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAub24oJ2Vycm9yJywgKGVycikgPT4gbG9nZ2VyLmVycm9yKGVycikpXG4gICAgKTtcbiAgfSxcbn07XG4iXX0=