"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _package = _interopRequireDefault(require("../package"));

var _eslint = _interopRequireDefault(require("./eslint"));

var _options = _interopRequireDefault(require("./cli/options"));

var _logger = require("./logger");

var _commands = _interopRequireDefault(require("./commands"));

var _watch = _interopRequireDefault(require("./events/watch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.createLogger)('main');
var _default = {
  async run([,, ...rawArgs]) {
    logger.debug(rawArgs);
    logger.debug(`ESW: v${_package.default.version}`);
    const eslOptions = await _eslint.default.getHelpOptions();

    const opts = _options.default.createOptions(_options.default.eswOptions, eslOptions);

    const cliOptions = opts.parse(rawArgs);
    logger.debug(cliOptions);

    if (cliOptions.help) {
      logger.debug('Printing help');
      return opts.helpText;
    }

    if (cliOptions.version || cliOptions.versions) {
      return await _commands.default.run(cliOptions);
    }

    let cmdResult = await _commands.default.run(cliOptions);

    if (cliOptions.watch) {
      _watch.default.listen(cliOptions);

      return;
    }

    const {
      flags,
      dirs
    } = _options.default.getCli(cliOptions);

    const lintResult = await _eslint.default.execute([...flags, ...dirs]);
    return `${cmdResult || ''}${lintResult || ''}`;
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJydW4iLCJyYXdBcmdzIiwiZGVidWciLCJwa2ciLCJ2ZXJzaW9uIiwiZXNsT3B0aW9ucyIsImVzbGludCIsImdldEhlbHBPcHRpb25zIiwib3B0cyIsIm9wdGlvbnMiLCJjcmVhdGVPcHRpb25zIiwiZXN3T3B0aW9ucyIsImNsaU9wdGlvbnMiLCJwYXJzZSIsImhlbHAiLCJoZWxwVGV4dCIsInZlcnNpb25zIiwiY29tbWFuZHMiLCJjbWRSZXN1bHQiLCJ3YXRjaCIsImxpc3RlbiIsImZsYWdzIiwiZGlycyIsImdldENsaSIsImxpbnRSZXN1bHQiLCJleGVjdXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUcsMEJBQWEsTUFBYixDQUFmO2VBRWU7QUFDYixRQUFNQyxHQUFOLENBQVUsSUFBSyxHQUFHQyxPQUFSLENBQVYsRUFBNEI7QUFDMUJGLElBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhRCxPQUFiO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFjLFNBQVFDLGlCQUFJQyxPQUFRLEVBQWxDO0FBRUEsVUFBTUMsVUFBVSxHQUFHLE1BQU1DLGdCQUFPQyxjQUFQLEVBQXpCOztBQUNBLFVBQU1DLElBQUksR0FBR0MsaUJBQVFDLGFBQVIsQ0FBc0JELGlCQUFRRSxVQUE5QixFQUEwQ04sVUFBMUMsQ0FBYjs7QUFDQSxVQUFNTyxVQUFVLEdBQUdKLElBQUksQ0FBQ0ssS0FBTCxDQUFXWixPQUFYLENBQW5CO0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhVSxVQUFiOztBQUVBLFFBQUlBLFVBQVUsQ0FBQ0UsSUFBZixFQUFxQjtBQUNuQmYsTUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWEsZUFBYjtBQUNBLGFBQU9NLElBQUksQ0FBQ08sUUFBWjtBQUNEOztBQUVELFFBQUlILFVBQVUsQ0FBQ1IsT0FBWCxJQUFzQlEsVUFBVSxDQUFDSSxRQUFyQyxFQUErQztBQUM3QyxhQUFPLE1BQU1DLGtCQUFTakIsR0FBVCxDQUFhWSxVQUFiLENBQWI7QUFDRDs7QUFFRCxRQUFJTSxTQUFTLEdBQUcsTUFBTUQsa0JBQVNqQixHQUFULENBQWFZLFVBQWIsQ0FBdEI7O0FBRUEsUUFBSUEsVUFBVSxDQUFDTyxLQUFmLEVBQXNCO0FBQ3BCQSxxQkFBTUMsTUFBTixDQUFhUixVQUFiOztBQUNBO0FBQ0Q7O0FBRUQsVUFBTTtBQUFFUyxNQUFBQSxLQUFGO0FBQVNDLE1BQUFBO0FBQVQsUUFBa0JiLGlCQUFRYyxNQUFSLENBQWVYLFVBQWYsQ0FBeEI7O0FBRUEsVUFBTVksVUFBVSxHQUFHLE1BQU1sQixnQkFBT21CLE9BQVAsQ0FBZSxDQUFDLEdBQUdKLEtBQUosRUFBVyxHQUFHQyxJQUFkLENBQWYsQ0FBekI7QUFFQSxXQUFRLEdBQUVKLFNBQVMsSUFBSSxFQUFHLEdBQUVNLFVBQVUsSUFBSSxFQUFHLEVBQTdDO0FBQ0Q7O0FBaENZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGtnIGZyb20gJy4uL3BhY2thZ2UnO1xuXG5pbXBvcnQgZXNsaW50IGZyb20gJy4vZXNsaW50JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vY2xpL29wdGlvbnMnO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IHdhdGNoIGZyb20gJy4vZXZlbnRzL3dhdGNoJztcblxuY29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCdtYWluJyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXN5bmMgcnVuKFssICwgLi4ucmF3QXJnc10pIHtcbiAgICBsb2dnZXIuZGVidWcocmF3QXJncyk7XG4gICAgbG9nZ2VyLmRlYnVnKGBFU1c6IHYke3BrZy52ZXJzaW9ufWApO1xuXG4gICAgY29uc3QgZXNsT3B0aW9ucyA9IGF3YWl0IGVzbGludC5nZXRIZWxwT3B0aW9ucygpO1xuICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmNyZWF0ZU9wdGlvbnMob3B0aW9ucy5lc3dPcHRpb25zLCBlc2xPcHRpb25zKTtcbiAgICBjb25zdCBjbGlPcHRpb25zID0gb3B0cy5wYXJzZShyYXdBcmdzKTtcblxuICAgIGxvZ2dlci5kZWJ1ZyhjbGlPcHRpb25zKTtcblxuICAgIGlmIChjbGlPcHRpb25zLmhlbHApIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUHJpbnRpbmcgaGVscCcpO1xuICAgICAgcmV0dXJuIG9wdHMuaGVscFRleHQ7XG4gICAgfVxuXG4gICAgaWYgKGNsaU9wdGlvbnMudmVyc2lvbiB8fCBjbGlPcHRpb25zLnZlcnNpb25zKSB7XG4gICAgICByZXR1cm4gYXdhaXQgY29tbWFuZHMucnVuKGNsaU9wdGlvbnMpO1xuICAgIH1cblxuICAgIGxldCBjbWRSZXN1bHQgPSBhd2FpdCBjb21tYW5kcy5ydW4oY2xpT3B0aW9ucyk7XG5cbiAgICBpZiAoY2xpT3B0aW9ucy53YXRjaCkge1xuICAgICAgd2F0Y2gubGlzdGVuKGNsaU9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZmxhZ3MsIGRpcnMgfSA9IG9wdGlvbnMuZ2V0Q2xpKGNsaU9wdGlvbnMpO1xuXG4gICAgY29uc3QgbGludFJlc3VsdCA9IGF3YWl0IGVzbGludC5leGVjdXRlKFsuLi5mbGFncywgLi4uZGlyc10pO1xuXG4gICAgcmV0dXJuIGAke2NtZFJlc3VsdCB8fCAnJ30ke2xpbnRSZXN1bHQgfHwgJyd9YDtcbiAgfSxcbn07XG4iXX0=