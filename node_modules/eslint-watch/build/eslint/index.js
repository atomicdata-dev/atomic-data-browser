"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _logger = _interopRequireDefault(require("../logger"));

var _execa = _interopRequireDefault(require("execa"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eslint = {
  async getHelpOptions() {
    const helpText = await eslint.execute(['--help'], {
      color: false
    });
    return _parser.default.parseHelp(helpText);
  },

  async execute(args = [], cliOptions = {}) {
    const logger = _logger.default.createLogger('eslint');

    logger.debug('Executing %o', args);
    const env = cliOptions.color ? {
      FORCE_COLOR: cliOptions.color
    } : {};

    try {
      const result = await (0, _execa.default)('eslint', args, {
        env: { ...process.env,
          ...env
        }
      });
      logger.debug(result);
      return result.stdout;
    } catch (error) {
      logger.debug(error);

      if (error.errno === 'ENOENT' && error.path === 'eslint') {
        throw new Error("Error: Eslint was not found either globally or locally.\nRun 'npm i -g eslint' or 'npm i -D eslint' to resolve the issue.");
      }

      throw new Error(error.stdout || error.stderr);
    }
  },

  async lint(args = [], cliOpts = {}) {
    const logger = _logger.default.createLogger('eslint');

    try {
      let endLine = '';
      const results = await eslint.execute(args, cliOpts);

      if (!results.trim()) {
        if (!cliOpts.quiet) {
          logger.log(`âœ“ Clean (${new Date().toLocaleTimeString()})`);
        }

        return;
      }

      if (!/\\n{2}$/.test(results)) {
        endLine = '\n';
      }

      logger.log(`${results}${endLine}`);
    } catch (error) {
      logger.error(error.message.trim());
    }
  }

};
var _default = eslint;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lc2xpbnQvaW5kZXguanMiXSwibmFtZXMiOlsiZXNsaW50IiwiZ2V0SGVscE9wdGlvbnMiLCJoZWxwVGV4dCIsImV4ZWN1dGUiLCJjb2xvciIsInBhcnNlciIsInBhcnNlSGVscCIsImFyZ3MiLCJjbGlPcHRpb25zIiwibG9nZ2VyIiwiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiZGVidWciLCJlbnYiLCJGT1JDRV9DT0xPUiIsInJlc3VsdCIsInByb2Nlc3MiLCJzdGRvdXQiLCJlcnJvciIsImVycm5vIiwicGF0aCIsIkVycm9yIiwic3RkZXJyIiwibGludCIsImNsaU9wdHMiLCJlbmRMaW5lIiwicmVzdWx0cyIsInRyaW0iLCJxdWlldCIsImxvZyIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ0ZXN0IiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2IsUUFBTUMsY0FBTixHQUF1QjtBQUNyQixVQUFNQyxRQUFRLEdBQUcsTUFBTUYsTUFBTSxDQUFDRyxPQUFQLENBQWUsQ0FBQyxRQUFELENBQWYsRUFBMkI7QUFBRUMsTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBM0IsQ0FBdkI7QUFFQSxXQUFPQyxnQkFBT0MsU0FBUCxDQUFpQkosUUFBakIsQ0FBUDtBQUNELEdBTFk7O0FBTWIsUUFBTUMsT0FBTixDQUFjSSxJQUFJLEdBQUcsRUFBckIsRUFBeUJDLFVBQVUsR0FBRyxFQUF0QyxFQUEwQztBQUN4QyxVQUFNQyxNQUFNLEdBQUdDLGdCQUFPQyxZQUFQLENBQW9CLFFBQXBCLENBQWY7O0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhLGNBQWIsRUFBNkJMLElBQTdCO0FBRUEsVUFBTU0sR0FBRyxHQUFHTCxVQUFVLENBQUNKLEtBQVgsR0FBbUI7QUFBRVUsTUFBQUEsV0FBVyxFQUFFTixVQUFVLENBQUNKO0FBQTFCLEtBQW5CLEdBQXVELEVBQW5FOztBQUVBLFFBQUk7QUFDRixZQUFNVyxNQUFNLEdBQUcsTUFBTSxvQkFBTSxRQUFOLEVBQWdCUixJQUFoQixFQUFzQjtBQUFFTSxRQUFBQSxHQUFHLEVBQUUsRUFBRSxHQUFHRyxPQUFPLENBQUNILEdBQWI7QUFBa0IsYUFBR0E7QUFBckI7QUFBUCxPQUF0QixDQUFyQjtBQUVBSixNQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYUcsTUFBYjtBQUVBLGFBQU9BLE1BQU0sQ0FBQ0UsTUFBZDtBQUNELEtBTkQsQ0FNRSxPQUFPQyxLQUFQLEVBQWM7QUFDZFQsTUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWFNLEtBQWI7O0FBRUEsVUFBSUEsS0FBSyxDQUFDQyxLQUFOLEtBQWdCLFFBQWhCLElBQTRCRCxLQUFLLENBQUNFLElBQU4sS0FBZSxRQUEvQyxFQUF5RDtBQUN2RCxjQUFNLElBQUlDLEtBQUosQ0FBVSwySEFBVixDQUFOO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQSxLQUFKLENBQVVILEtBQUssQ0FBQ0QsTUFBTixJQUFnQkMsS0FBSyxDQUFDSSxNQUFoQyxDQUFOO0FBQ0Q7QUFDRixHQTVCWTs7QUE2QmIsUUFBTUMsSUFBTixDQUFXaEIsSUFBSSxHQUFHLEVBQWxCLEVBQXNCaUIsT0FBTyxHQUFHLEVBQWhDLEVBQW9DO0FBQ2xDLFVBQU1mLE1BQU0sR0FBR0MsZ0JBQU9DLFlBQVAsQ0FBb0IsUUFBcEIsQ0FBZjs7QUFFQSxRQUFJO0FBQ0YsVUFBSWMsT0FBTyxHQUFHLEVBQWQ7QUFDQSxZQUFNQyxPQUFPLEdBQUcsTUFBTTFCLE1BQU0sQ0FBQ0csT0FBUCxDQUFlSSxJQUFmLEVBQXFCaUIsT0FBckIsQ0FBdEI7O0FBRUEsVUFBSSxDQUFDRSxPQUFPLENBQUNDLElBQVIsRUFBTCxFQUFxQjtBQUNuQixZQUFJLENBQUNILE9BQU8sQ0FBQ0ksS0FBYixFQUFvQjtBQUNsQm5CLFVBQUFBLE1BQU0sQ0FBQ29CLEdBQVAsQ0FBWSxZQUFXLElBQUlDLElBQUosR0FBV0Msa0JBQVgsRUFBZ0MsR0FBdkQ7QUFDRDs7QUFDRDtBQUNEOztBQUVELFVBQUksQ0FBQyxVQUFVQyxJQUFWLENBQWVOLE9BQWYsQ0FBTCxFQUE4QjtBQUM1QkQsUUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDRDs7QUFFRGhCLE1BQUFBLE1BQU0sQ0FBQ29CLEdBQVAsQ0FBWSxHQUFFSCxPQUFRLEdBQUVELE9BQVEsRUFBaEM7QUFDRCxLQWhCRCxDQWdCRSxPQUFPUCxLQUFQLEVBQWM7QUFDZFQsTUFBQUEsTUFBTSxDQUFDUyxLQUFQLENBQWFBLEtBQUssQ0FBQ2UsT0FBTixDQUFjTixJQUFkLEVBQWI7QUFDRDtBQUNGOztBQW5EWSxDQUFmO2VBc0RlM0IsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IGV4ZWNhIGZyb20gJ2V4ZWNhJztcblxuY29uc3QgZXNsaW50ID0ge1xuICBhc3luYyBnZXRIZWxwT3B0aW9ucygpIHtcbiAgICBjb25zdCBoZWxwVGV4dCA9IGF3YWl0IGVzbGludC5leGVjdXRlKFsnLS1oZWxwJ10sIHsgY29sb3I6IGZhbHNlIH0pO1xuXG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZUhlbHAoaGVscFRleHQpO1xuICB9LFxuICBhc3luYyBleGVjdXRlKGFyZ3MgPSBbXSwgY2xpT3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbG9nZ2VyID0gTG9nZ2VyLmNyZWF0ZUxvZ2dlcignZXNsaW50Jyk7XG5cbiAgICBsb2dnZXIuZGVidWcoJ0V4ZWN1dGluZyAlbycsIGFyZ3MpO1xuXG4gICAgY29uc3QgZW52ID0gY2xpT3B0aW9ucy5jb2xvciA/IHsgRk9SQ0VfQ09MT1I6IGNsaU9wdGlvbnMuY29sb3IgfSA6IHt9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4ZWNhKCdlc2xpbnQnLCBhcmdzLCB7IGVudjogeyAuLi5wcm9jZXNzLmVudiwgLi4uZW52IH0gfSk7XG5cbiAgICAgIGxvZ2dlci5kZWJ1ZyhyZXN1bHQpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0LnN0ZG91dDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmRlYnVnKGVycm9yKTtcblxuICAgICAgaWYgKGVycm9yLmVycm5vID09PSAnRU5PRU5UJyAmJiBlcnJvci5wYXRoID09PSAnZXNsaW50Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvcjogRXNsaW50IHdhcyBub3QgZm91bmQgZWl0aGVyIGdsb2JhbGx5IG9yIGxvY2FsbHkuXFxuUnVuICducG0gaSAtZyBlc2xpbnQnIG9yICducG0gaSAtRCBlc2xpbnQnIHRvIHJlc29sdmUgdGhlIGlzc3VlLlwiKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLnN0ZG91dCB8fCBlcnJvci5zdGRlcnIpO1xuICAgIH1cbiAgfSxcbiAgYXN5bmMgbGludChhcmdzID0gW10sIGNsaU9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGxvZ2dlciA9IExvZ2dlci5jcmVhdGVMb2dnZXIoJ2VzbGludCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBlbmRMaW5lID0gJyc7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgZXNsaW50LmV4ZWN1dGUoYXJncywgY2xpT3B0cyk7XG5cbiAgICAgIGlmICghcmVzdWx0cy50cmltKCkpIHtcbiAgICAgICAgaWYgKCFjbGlPcHRzLnF1aWV0KSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhg4pyTIENsZWFuICgke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCEvXFxcXG57Mn0kLy50ZXN0KHJlc3VsdHMpKSB7XG4gICAgICAgIGVuZExpbmUgPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmxvZyhgJHtyZXN1bHRzfSR7ZW5kTGluZX1gKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKGVycm9yLm1lc3NhZ2UudHJpbSgpKTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBlc2xpbnQ7XG4iXX0=