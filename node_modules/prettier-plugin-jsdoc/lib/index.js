"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.options = void 0;
const parser_1 = require("./parser");
const parser_babel_1 = __importDefault(require("prettier/parser-babel"));
const parser_flow_1 = __importDefault(require("prettier/parser-flow"));
const parser_typescript_1 = __importDefault(require("prettier/parser-typescript"));
const prettier_1 = __importDefault(require("prettier"));
exports.options = {
    jsdocParser: {
        type: "boolean",
        category: "jsdoc",
        default: true,
        description: "Format with jsdoc if is true",
    },
    jsdocSpaces: {
        type: "int",
        category: "jsdoc",
        default: 1,
        description: "How many spaces will be used to separate tag elements.",
    },
    jsdocDescriptionWithDot: {
        type: "boolean",
        category: "jsdoc",
        default: false,
        description: "Should dot be inserted at the end of description",
    },
    jsdocDescriptionTag: {
        type: "boolean",
        category: "jsdoc",
        default: false,
        description: "Should description tag be used",
    },
    jsdocVerticalAlignment: {
        type: "boolean",
        category: "jsdoc",
        default: false,
        description: "Should tags, types, names and description be aligned",
    },
    jsdocKeepUnParseAbleExampleIndent: {
        type: "boolean",
        category: "jsdoc",
        default: false,
        description: "Should unParseAble example (pseudo code or no js code) keep its indentation",
    },
};
const defaultOptions = {
    jsdocParser: true,
    jsdocSpaces: 1,
    jsdocDescriptionWithDot: false,
    jsdocDescriptionTag: false,
    jsdocVerticalAlignment: false,
    jsdocKeepUnParseAbleExampleIndent: false,
};
const languages = prettier_1.default
    .getSupportInfo()
    .languages.filter(({ name }) => [
    "JavaScript",
    "Flow",
    "JSX",
    "TSX",
    "TypeScript",
    "Markdown",
    "MDX",
].includes(name));
const parsers = {
    // JS - Babel
    get babel() {
        const parser = parser_babel_1.default.parsers.babel;
        return { ...parser, parse: parser_1.getParser(parser.parse) };
    },
    get "babel-flow"() {
        const parser = parser_babel_1.default.parsers["babel-flow"];
        return { ...parser, parse: parser_1.getParser(parser.parse) };
    },
    get "babel-ts"() {
        const parser = parser_babel_1.default.parsers["babel-ts"];
        return { ...parser, parse: parser_1.getParser(parser.parse) };
    },
    // JS - Flow
    get flow() {
        const parser = parser_flow_1.default.parsers.flow;
        return { ...parser, parse: parser_1.getParser(parser.parse) };
    },
    // JS - TypeScript
    get typescript() {
        const parser = parser_typescript_1.default.parsers.typescript;
        return { ...parser, parse: parser_1.getParser(parser.parse) };
        // require("./parser-typescript").parsers.typescript;
    },
    get "jsdoc-parser"() {
        // Backward compatible, don't use this in new version since 1.0.0
        const parser = parser_babel_1.default.parsers["babel-ts"];
        return { ...parser, parse: parser_1.getParser(parser.parse) };
    },
};
module.exports = {
    languages,
    options: exports.options,
    parsers,
    defaultOptions,
};
