"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalizer = exports.addStarsToTheBeginningOfTheLines = exports.formatType = exports.convertToModernArray = void 0;
const prettier_1 = require("prettier");
function convertToModernArray(type) {
    if (!type) {
        return type;
    }
    const maxWrapper = /^(?!<>\]\[\{\}:;,\s)(Array<([^<>]+)>)/g;
    const minWrapper = /^(?!<>\]\[\{\}:;,\s)(Array<([^.]+)>)/g;
    type = type.replace(".<", "<");
    function replaceArray(value) {
        let regular = maxWrapper;
        let result = regular.exec(value);
        if (!result) {
            regular = minWrapper;
            result = regular.exec(value);
        }
        if (!result) {
            return value;
        }
        const typeName = result[2];
        value = value.replace(regular, `${typeName}[]`);
        return replaceArray(value);
    }
    return replaceArray(type);
}
exports.convertToModernArray = convertToModernArray;
function formatType(type, options) {
    try {
        let pretty = type.replace("*", "any");
        const TYPE_START = "type name = ";
        pretty = prettier_1.format(`${TYPE_START}${pretty}`, {
            ...options,
            parser: "typescript",
        });
        pretty = pretty.slice(TYPE_START.length);
        pretty = pretty.replace(/[;\n]*$/g, "");
        return pretty;
    }
    catch (error) {
        // console.log("jsdoc-parser", error);
        return type;
    }
}
exports.formatType = formatType;
function addStarsToTheBeginningOfTheLines(comment) {
    if (numberOfAStringInString(comment.trim(), "\n") === 0) {
        return `* ${comment.trim()} `;
    }
    return `*${comment.replace(/((?!\n$)\n)/g, "\n * ")}\n `;
}
exports.addStarsToTheBeginningOfTheLines = addStarsToTheBeginningOfTheLines;
function numberOfAStringInString(string, search) {
    return (string.match(new RegExp(search, "g")) || []).length;
}
// capitalize if needed
function capitalizer(str) {
    if (!str) {
        return str;
    }
    if (str.match(new RegExp("^(http|https)://", "i"))) {
        return str;
    }
    if (str.startsWith("- ")) {
        return str.slice(0, 2) + capitalizer(str.slice(2));
    }
    return str[0].toUpperCase() + str.slice(1);
}
exports.capitalizer = capitalizer;
