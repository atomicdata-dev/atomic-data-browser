"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
// tslint:disable-next-line: no-commented-code
// tslint:disable: no-expression-statement
// tslint:disable: no-object-mutation
// tslint:disable: readonly-array
// tslint:disable: no-duplicate-string
// tslint:disable: no-identical-functions
// tslint:disable: no-throw
// Keep references to the original values of these functions.
var documentElementFocus = window.document.documentElement.focus;
var bodyFocus = window.document.body.focus;
var matchMedia = window.matchMedia;
var getComputedStyle = window.getComputedStyle;
beforeEach(function () {
    // Clear previous test's DOM.
    window.document.body.innerHTML = "";
    // js-dom doesn't implement scrollTo
    // tslint:disable-next-line: no-empty
    window.scrollTo = function () { };
    // js-dom doesn't implement scrollIntoView
    // tslint:disable-next-line: no-empty
    Element.prototype.scrollIntoView = function () { };
    // Restore these functions because some tests mess with them.
    window.document.documentElement.focus = documentElementFocus;
    window.document.body.focus = bodyFocus;
    window.matchMedia = matchMedia;
    window.getComputedStyle = getComputedStyle;
});
describe("elementFromHash", function () {
    test("finds element by ID", function () {
        var div = window.document.createElement("div");
        div.id = "test-id";
        document.body.appendChild(div);
        expect(_1.elementFromHash("#test-id")).toBe(div);
    });
    var elementFromHashTable = [
        ["#", window.document.documentElement],
        ["#top", window.document.documentElement],
        ["", undefined],
        ["a", undefined],
        [null, undefined],
        [undefined, undefined],
        [true, undefined],
        [1, undefined],
        [{}, undefined],
        [[], undefined],
    ];
    describe.each(elementFromHashTable)("returns expected element", function (hash, expected) {
        test("for hash " + JSON.stringify(hash), function () {
            expect(_1.elementFromHash(hash)).toBe(expected);
        });
    });
});
describe("elementFromTarget", function () {
    test("returns undefined for malformed CSS query", function () {
        expect(_1.elementFromTarget("a[")).toBeUndefined();
    });
    test("returns element for valid CSS query", function () {
        expect(_1.elementFromTarget("body")).toBe(window.document.body);
    });
    test("returns element for element", function () {
        expect(_1.elementFromTarget(window.document.body)).toBe(window.document.body);
    });
});
describe("announce", function () {
    test("doesn't throw", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.announce("hello")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("resetFocus", function () {
    test("sets focus to the primaryFocusTarget", function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.resetFocus("body")];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    expect(window.document.activeElement).toBe(window.document.body);
                    return [2 /*return*/];
            }
        });
    }); });
    test("sets focus to the focusTarget", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    window.document.body.appendChild(div);
                    return [4 /*yield*/, _1.resetFocus("body", div)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    expect(window.document.activeElement).toBe(div);
                    return [2 /*return*/];
            }
        });
    }); });
    test("returns false if nothing could be focused", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, p, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    window.document.body.appendChild(div);
                    p = window.document.createElement("p");
                    window.document.body.appendChild(p);
                    div.focus = function () {
                        // tslint:disable-next-line: no-string-throw
                        throw "Expected error";
                    };
                    p.focus = function () {
                        // tslint:disable-next-line: no-string-throw
                        throw "Expected error";
                    };
                    window.document.documentElement.focus = function () {
                        // tslint:disable-next-line: no-string-throw
                        throw "Expected error";
                    };
                    window.document.body.focus = function () {
                        // tslint:disable-next-line: no-string-throw
                        throw "Expected error";
                    };
                    return [4 /*yield*/, _1.resetFocus("div", "p")];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("focusAndScrollIntoViewIfRequired", function () {
    test("doesn't throw when focus and scroll elements are the same", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusAndScrollIntoViewIfRequired("body", "body")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when focus element doesn't exist", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusAndScrollIntoViewIfRequired("does-not-exist", "body")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when scroll element doesn't exist", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusAndScrollIntoViewIfRequired("body", "does-not-exist")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when focus and scroll elements are different", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = document.createElement("div");
                    document.body.appendChild(div);
                    p = document.createElement("p");
                    document.body.appendChild(p);
                    return [4 /*yield*/, _1.focusAndScrollIntoViewIfRequired(div, p)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when smooth scrolling", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusAndScrollIntoViewIfRequired("body", "body", true)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("focusInvalidForm", function () {
    test("doesn't throw if form doesn't exist", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusInvalidForm("form", "[aria-invalid=true]", ".form-group")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw if invalid element doesn't exist", function () { return __awaiter(void 0, void 0, void 0, function () {
        var form;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    form = document.createElement("form");
                    document.body.appendChild(form);
                    return [4 /*yield*/, _1.focusInvalidForm(form, "[aria-invalid=true]", ".form-group")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test("focuses an invalid element", function () { return __awaiter(void 0, void 0, void 0, function () {
        var form, invalidInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    form = document.createElement("form");
                    document.body.appendChild(form);
                    invalidInput = document.createElement("input");
                    invalidInput.setAttribute("aria-invalid", "true");
                    form.appendChild(invalidInput);
                    return [4 /*yield*/, _1.focusInvalidForm(form, "[aria-invalid=true]", ".form-group")];
                case 1:
                    _a.sent();
                    expect(document.activeElement).toBe(invalidInput);
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw if closest() is undefined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var form, invalidInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    form = document.createElement("form");
                    document.body.appendChild(form);
                    invalidInput = document.createElement("input");
                    invalidInput.setAttribute("aria-invalid", "true");
                    form.appendChild(invalidInput);
                    // @ts-ignore
                    invalidInput.closest = undefined;
                    return [4 /*yield*/, _1.focusInvalidForm(form, "[aria-invalid=true]", ".form-group")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("setTitle", function () {
    var titles = [
        ["hello", "hello"],
        ["", ""],
        [null, "null"],
        [undefined, "undefined"],
        [true, "true"],
        [1, "1"],
        [{}, "[object Object]"],
        [[], ""],
    ];
    describe.each(titles)("sets the document title", function (title, expected) {
        test("for title " + JSON.stringify(title), function () {
            _1.setTitle(title);
            expect(document.title).toBe(expected);
        });
    });
});
describe("scrollIntoView", function () {
    test("doesn't throw", function () {
        var div = document.createElement("div");
        document.body.appendChild(div);
        _1.scrollIntoView(window.document.body);
        _1.scrollIntoView(window.document.documentElement);
        _1.scrollIntoView(div);
        _1.scrollIntoView(div, true);
    });
    test("handles exception from scrollIntoView when smooth scrolling", function () {
        var div = document.createElement("div");
        document.body.appendChild(div);
        div.scrollIntoView = function (options) {
            // tslint:disable-next-line: no-if-statement
            if (options !== undefined && options.behavior === "smooth") {
                throw new Error("");
            }
        };
        _1.scrollIntoView(div, true);
    });
});
describe("scrollIntoView", function () {
    test("doesn't throw when using smooth scrolling", function () {
        _1.setScrollPosition({ x: 0, y: 0 }, true);
    });
    test("handles exception from scrollTo when smooth scrolling", function () {
        var scrollTo = function (options) {
            // tslint:disable-next-line: no-if-statement
            if (options !== undefined && options.behavior === "smooth") {
                throw new Error("");
            }
        };
        // @ts-ignore
        window.scrollTo = scrollTo;
        _1.setScrollPosition({ x: 0, y: 0 }, true);
    });
});
describe("prefersReducedMotion", function () {
    test("doesn't throw when window.matchMedia is undefined", function () {
        expect(_1.prefersReducedMotion()).toBe(false);
    });
    test("calls window.matchMedia appropriately", function () {
        window.matchMedia = function () { return ({ matches: true }); };
        expect(_1.prefersReducedMotion()).toBe(true);
    });
});
describe("scrollIntoViewIfRequired", function () {
    test("doesn't throw", function () {
        _1.scrollIntoViewIfRequired(document.documentElement);
    });
    test("doesn't throw if smooth scrolling", function () {
        _1.scrollIntoViewIfRequired(document.documentElement, true);
    });
    test("doesn't throw when element is not in viewport", function () {
        _1.scrollIntoViewIfRequired(document.documentElement, false, function () { return false; });
    });
});
describe("focusElement", function () {
    test("returns false when selector doesn't exist", function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.focusElement("does-not-exist")];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    test("focuses the specified element", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    window.document.body.appendChild(div);
                    return [4 /*yield*/, _1.focusElement(div, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    expect(window.document.activeElement).toBe(div);
                    expect(div.getAttribute("tabindex")).toBe("-1");
                    div.blur();
                    expect(div.getAttribute("tabindex")).toBeNull();
                    return [2 /*return*/];
            }
        });
    }); });
    test("leaves tabindex alone if already set", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    div.setAttribute("tabindex", "0");
                    window.document.body.appendChild(div);
                    return [4 /*yield*/, _1.focusElement(div, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    expect(window.document.activeElement).toBe(div);
                    expect(div.getAttribute("tabindex")).toBe("0");
                    div.blur();
                    expect(div.getAttribute("tabindex")).toBe("0");
                    return [2 /*return*/];
            }
        });
    }); });
    test("handles exceptions from focus() when preventScroll is true", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, originalFocus, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    window.document.body.appendChild(div);
                    originalFocus = div.focus;
                    div.focus = function (options) {
                        // tslint:disable-next-line: no-if-statement
                        if (options !== undefined && options.preventScroll === true) {
                            throw new Error("");
                        }
                        else {
                            originalFocus.call(div);
                        }
                    };
                    return [4 /*yield*/, _1.focusElement(div, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    expect(window.document.activeElement).toBe(div);
                    return [2 /*return*/];
            }
        });
    }); });
    test("returns false when focus() throws", function () { return __awaiter(void 0, void 0, void 0, function () {
        var div, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    div = window.document.createElement("div");
                    window.document.body.appendChild(div);
                    div.focus = function () {
                        // tslint:disable: no-string-throw
                        throw "Expected error";
                    };
                    return [4 /*yield*/, _1.focusElement(div, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(false);
                    expect(window.document.activeElement).not.toBe(div);
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when window.getComputedStyle is undefined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // @ts-ignore
                    window.getComputedStyle = undefined;
                    return [4 /*yield*/, _1.focusElement(document.body, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    test("doesn't throw when smooth scroll set via CSS", function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // @ts-ignore
                    window.getComputedStyle = function () { return ({ scrollBehavior: "smooth" }); };
                    return [4 /*yield*/, _1.focusElement(document.body, true)];
                case 1:
                    result = _a.sent();
                    expect(result).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe("closestInsideForm", function () {
    test("matches wrapper element inside form", function () {
        var form = window.document.createElement("form");
        var div = window.document.createElement("div");
        var input = window.document.createElement("input");
        form.appendChild(div);
        div.appendChild(input);
        window.document.body.appendChild(form);
        expect(_1.closestInsideForm(input, "div", form)).toBe(div);
    });
    test("stops at form even when match exists above form", function () {
        var div = window.document.createElement("div");
        var form = window.document.createElement("form");
        var input = window.document.createElement("input");
        form.appendChild(input);
        div.appendChild(form);
        window.document.body.appendChild(div);
        expect(_1.closestInsideForm(input, "div", form)).toBeUndefined();
    });
});
