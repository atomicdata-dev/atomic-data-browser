export var createDocument: () => import("parse5").Document;
export var createDocumentFragment: () => import("parse5").DocumentFragment;
/**
 * Creates an element node.
 *
 * @param {string} tagName Tag name of the element.
 * @param {Record<string, string>} attrs Attribute name-value pair array. Foreign attributes may contain `namespace` and `prefix` fields as well.
 * @param {string} namespaceURI  Namespace of the element.
 */
export function createElement(tagName: string, attrs?: Record<string, string>, namespaceURI?: string): import("parse5").Element;
/**
 * Creates a script element.
 * @param {Record<string,string>} [attrs]
 * @param {string} [code]
 */
export function createScript(attrs?: Record<string, string> | undefined, code?: string | undefined): import("parse5").Element;
export var createCommentNode: (data: string) => import("parse5").CommentNode;
export var appendChild: (parentNode: import("parse5").ParentNode, newNode: import("parse5").Node) => void;
export var insertBefore: (parentNode: import("parse5").ParentNode, newNode: import("parse5").Node, referenceNode: import("parse5").Node) => void;
export var setTemplateContent: (templateElement: import("parse5").Element, contentElement: import("parse5").DocumentFragment) => void;
export var getTemplateContent: (templateElement: import("parse5").Element) => import("parse5").DocumentFragment;
export var setDocumentType: (document: import("parse5").Document, name: string, publicId: string, systemId: string) => void;
export var setDocumentMode: (document: import("parse5").Document, mode: import("parse5").DocumentMode) => void;
export var getDocumentMode: (document: import("parse5").Document) => import("parse5").DocumentMode;
export var detachNode: (node: import("parse5").Node) => void;
export var insertText: (parentNode: import("parse5").ParentNode, text: string) => void;
export var insertTextBefore: (parentNode: import("parse5").ParentNode, text: string, referenceNode: import("parse5").Node) => void;
export var adoptAttributes: (recipient: import("parse5").Element, attrs: import("parse5").Attribute[]) => void;
export var getFirstChild: (node: import("parse5").ParentNode) => import("parse5").Node;
export var getChildNodes: (node: import("parse5").ParentNode) => import("parse5").Node[];
export var getParentNode: (node: import("parse5").ChildNode) => import("parse5").ParentNode;
export var getAttrList: (element: import("parse5").Element) => import("parse5").Attribute[];
export var getTagName: (element: import("parse5").Element) => string;
export var getNamespaceURI: (element: import("parse5").Element) => string;
export var getTextNodeContent: (textNode: import("parse5").TextNode) => string;
export var getCommentNodeContent: (commentNode: import("parse5").CommentNode) => string;
export var getDocumentTypeNodeName: (doctypeNode: import("parse5").DocumentType) => string;
export var getDocumentTypeNodePublicId: (doctypeNode: import("parse5").DocumentType) => string;
export var getDocumentTypeNodeSystemId: (doctypeNode: import("parse5").DocumentType) => string;
export var isTextNode: (node: import("parse5").Node) => boolean;
export var isCommentNode: (node: import("parse5").Node) => boolean;
export var isDocumentTypeNode: (node: import("parse5").Node) => boolean;
export var isElementNode: (node: import("parse5").Node) => boolean;
export var setNodeSourceCodeLocation: (node: import("parse5").Node, location: import("parse5").ElementLocation | import("parse5").StartTagLocation | import("parse5").Location) => void;
export var getNodeSourceCodeLocation: (node: import("parse5").Node) => import("parse5").ElementLocation | import("parse5").StartTagLocation | import("parse5").Location;
/**
 * @param {string} html
 */
export function isHtmlFragment(html: string): boolean;
/**
 * @param {Node} element
 * @param {string} name
 */
export function hasAttribute(element: Node, name: string): boolean;
/**
 * @param {Node} element
 * @param {string} name
 */
export function getAttribute(element: Node, name: string): string | null | undefined;
/**
 * @param {Node} element
 */
export function getAttributes(element: Node): Record<string, string>;
/**
 *
 * @param {Node} node
 * @param {string} name
 * @param {string} value
 */
export function setAttribute(node: Node, name: string, value: string): void;
/**
 * @param {Node} element
 * @param {Record<string,string|undefined>} attributes
 */
export function setAttributes(element: Node, attributes: Record<string, string | undefined>): void;
/**
 * @param {Node} node
 * @param {string} name
 */
export function removeAttribute(node: Node, name: string): void;
/**
 * @param {Element} node
 * @param {string} value
 */
export function setTextContent(node: Element, value: string): void;
/**
 * @param {Node} node
 * @returns {string}
 */
export function getTextContent(node: Node): string;
/**
 * Removes element from the AST.
 * @param {ChildNode} node
 */
export function remove(node: ChildNode): void;
/**
 * Looks for a child node which passes the given test
 * @param {Node[] | Node} nodes
 * @param {(node: DefaultTreeNode) => boolean} test
 * @returns {DefaultTreeNode | null}
 */
export function findNode(nodes: Node[] | Node, test: (node: DefaultTreeNode) => boolean): DefaultTreeNode | null;
/**
 * Looks for all child nodes which passes the given test
 * @param {Node | Node[]} nodes
 * @param {(node: DefaultTreeNode) => boolean} test
 * @returns {DefaultTreeNode[]}
 */
export function findNodes(nodes: Node | Node[], test: (node: DefaultTreeNode) => boolean): DefaultTreeNode[];
/**
 * Looks for a child element which passes the given test
 * @param {Node[] | Node} nodes
 * @param {(node: DefaultTreeElement) => boolean} test
 * @returns {DefaultTreeElement | null}
 */
export function findElement(nodes: Node[] | Node, test: (node: DefaultTreeElement) => boolean): DefaultTreeElement | null;
/**
 * Looks for all child elements which passes the given test
 * @param {Node | Node[]} nodes
 * @param {(node: Node) => boolean} test
 * @returns {DefaultTreeElement[]}
 */
export function findElements(nodes: Node | Node[], test: (node: Node) => boolean): DefaultTreeElement[];
/**
 * Prepends HTML snippet to the given html document. The document must have either
 * a <body> or <head> element.
 * @param {string} document
 * @param {string} appendedHtml
 * @returns {string | null}
 */
export function prependToDocument(document: string, appendedHtml: string): string | null;
/**
 * Append HTML snippet to the given html document. The document must have either
 * a <body> or <head> element.
 * @param {string} document
 * @param {string} appendedHtml
 */
export function appendToDocument(document: string, appendedHtml: string): string;
export type TreeAdapter = import("parse5").TreeAdapter;
export type Element = object | import("parse5").DefaultTreeElement;
export type Attribute = import("parse5").Attribute;
export type Node = object | import("parse5").DefaultTreeNode;
export type ParentNode = object | import("parse5").DefaultTreeParentNode;
export type ChildNode = object | import("parse5").DefaultTreeChildNode;
export type DefaultTreeElement = import("parse5").DefaultTreeElement;
export type DefaultTreeNode = import("parse5").DefaultTreeNode;
export type DefaultTreeChildNode = import("parse5").DefaultTreeChildNode;
export type DefaultTreeCommentNode = import("parse5").DefaultTreeCommentNode;
export type DefaultTreeTextNode = import("parse5").DefaultTreeTextNode;
//# sourceMappingURL=index.d.ts.map