"use strict";
// tslint:disable: no-expression-statement
// tslint:disable: no-if-statement
// tslint:disable: interface-over-type-literal
// tslint:disable: object-literal-sort-keys
// tslint:disable: no-array-mutation
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPageStateMemory = function () {
    // TODO constrain the size of these collections?
    // TODO persist these?
    var locations = new Array();
    var pageStateMap = new Map();
    var handlePushAction = function (previousLocationKey, nextLocationKey) {
        var desiredLocationsLength = locations.indexOf(previousLocationKey) + 1;
        // tslint:disable-next-line: no-loop-statement
        while (locations.length > desiredLocationsLength) {
            var key = locations.pop();
            if (key !== undefined) {
                pageStateMap.delete(key);
            }
        }
        locations.push(nextLocationKey);
        return;
    };
    var handleReplaceAction = function (previousLocationKey, nextLocationKey) {
        var indexToReplace = locations.indexOf(previousLocationKey);
        if (indexToReplace !== -1) {
            // tslint:disable-next-line: no-object-mutation
            locations[indexToReplace] = nextLocationKey;
        }
        pageStateMap.delete(previousLocationKey);
    };
    return {
        pageState: function (key) {
            return pageStateMap.get(key);
        },
        update: function (action, previousLocationKey, nextLocationKey, previousPageState) {
            pageStateMap.set(previousLocationKey, previousPageState);
            if (action === "PUSH") {
                handlePushAction(previousLocationKey, nextLocationKey);
            }
            else if (action === "REPLACE") {
                handleReplaceAction(previousLocationKey, nextLocationKey);
            }
        },
    };
};
