{"version":3,"file":"downshift.umd.min.js","sources":["../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/react-is/index.js","../../node_modules/compute-scroll-into-view/dist/index.module.js","../../src/utils.js","../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../src/downshift.js","../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../../src/hooks/utils.js","../../src/hooks/reducer.js","../../src/hooks/useSelect/utils.js","../../src/hooks/useSelect/reducer.js","../../src/hooks/useSelect/index.js","../../src/hooks/useCombobox/stateChangeTypes.js","../../src/hooks/useCombobox/utils.js","../../src/hooks/useCombobox/reducer.js","../../src/hooks/useCombobox/index.js","../../src/hooks/useMultipleSelection/utils.js","../../src/hooks/useMultipleSelection/reducer.js","../../src/hooks/useMultipleSelection/index.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/** @license React v17.0.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","function t(t){return null!=t&&\"object\"==typeof t&&1===t.nodeType}function e(t,e){return(!e||\"hidden\"!==t)&&\"visible\"!==t&&\"clip\"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}export default function(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c=\"function\"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError(\"Invalid target\");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;t(p)&&c(p);){if((p=p.parentNode)===f){s.push(p);break}p===document.body&&n(p)&&!n(document.documentElement)||n(p,a)&&s.push(p)}for(var g=o.visualViewport?o.visualViewport.width:innerWidth,m=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,M=W.right,E=W.bottom,V=W.left,x=\"start\"===d||\"nearest\"===d?y:\"end\"===d?E:y+b/2,I=\"center\"===u?V+H/2:\"end\"===u?M:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if(\"if-needed\"===l&&y>=0&&V>=0&&E<=m&&M<=g&&y>=R&&E<=Y&&V>=L&&M<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),N=parseInt(S.borderTopWidth,10),q=parseInt(S.borderRightWidth,10),z=parseInt(S.borderBottomWidth,10),A=0,F=0,G=\"offsetWidth\"in k?k.offsetWidth-k.clientWidth-j-q:0,J=\"offsetHeight\"in k?k.offsetHeight-k.clientHeight-N-z:0;if(f===k)A=\"start\"===d?x:\"end\"===d?x-m:\"nearest\"===d?r(v,v+m,m,N,z,v+x,v+x+b,b):x-m/2,F=\"start\"===u?I:\"center\"===u?I-g/2:\"end\"===u?I-g:r(w,w+g,g,j,q,w+I,w+I+H,H),A=Math.max(0,A+v),F=Math.max(0,F+w);else{A=\"start\"===d?x-R-N:\"end\"===d?x-Y+z+J:\"nearest\"===d?r(R,Y,D,N,z+J,x,x+b,b):x-(R+D/2)+J/2,F=\"start\"===u?I-L-j:\"center\"===u?I-(L+O/2)+G/2:\"end\"===u?I-X+q+G:r(L,X,O,j,q+G,I,I+H,H);var K=k.scrollLeft,P=k.scrollTop;x+=P-(A=Math.max(0,Math.min(P+A,k.scrollHeight-D+J))),I+=K-(F=Math.max(0,Math.min(K+F,k.scrollWidth-O+G)))}C.push({el:k,top:A,left:F})}return C}\n//# sourceMappingURL=index.module.js.map\n","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return (\n    parent === child ||\n    (child instanceof Node && parent.contains && parent.contains(child))\n  )\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\nfunction handleRefs(...refs) {\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact or preact X\n    return (\n      typeof element.type === 'string' || typeof element.nodeName === 'string'\n    )\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.props || element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key]\n\n    return prevState\n  }, {})\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular = true,\n) {\n  if (itemCount === 0) {\n    return -1\n  }\n\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n\n  let newIndex = baseIndex + moveAmount\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex\n  }\n\n  const nonDisabledNewIndex = getNextNonDisabledIndex(\n    moveAmount,\n    newIndex,\n    itemCount,\n    getItemNodeFromIndex,\n    circular,\n  )\n\n  if (nonDisabledNewIndex === -1) {\n    return baseIndex >= itemCount ? -1 : baseIndex\n  }\n\n  return nonDisabledNewIndex\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular,\n) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex)\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex\n  }\n\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0\n      ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false)\n      : getNextNonDisabledIndex(\n          -1,\n          itemCount - 1,\n          itemCount,\n          getItemNodeFromIndex,\n          false,\n        )\n  }\n\n  return -1\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Document} document The document.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(\n  target,\n  downshiftElements,\n  document,\n  checkActiveElement = true,\n) {\n  return downshiftElements.some(\n    contextNode =>\n      contextNode &&\n      (isOrContainsNode(contextNode, target) ||\n        (checkActiveElement &&\n          isOrContainsNode(contextNode, document.activeElement))),\n  )\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validateControlledUnchanged = noop\n/* istanbul ignore next */\nif (process.env.NODE_ENV  !== 'production') {\n  validateControlledUnchanged = (state, prevProps, nextProps) => {\n    const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n\n    Object.keys(state).forEach(propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    })\n  }\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  targetWithinDownshift,\n  getState,\n  isControlledProp,\n  validateControlledUnchanged\n}\n","import {debounce} from './utils'\n\nconst cleanupStatus = debounce((documentProp) => {\n  getStatusDiv(documentProp).textContent = ''\n}, 500)\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp)\n  if (!status) {\n    return\n  }\n\n  div.textContent = status\n  cleanupStatus(documentProp)\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp = document) {\n  let statusDiv = documentProp.getElementById('a11y-status-message')\n  if (statusDiv) {\n    return statusDiv\n  }\n\n  statusDiv = documentProp.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  documentProp.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport {Component, cloneElement} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  handleRefs,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  targetWithinDownshift,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  getState,\n  isControlledProp,\n  validateControlledUnchanged,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return getState(stateToMerge, this.props)\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    const {highlightedIndex} = this.getState()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        highlightedIndex,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!isControlledProp(this.props, key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ref, ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: handleRefs(ref, this.rootRef),\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowDown,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                -1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowUp,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      if (event.which === 229) {\n        return\n      }\n\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        ...(!this.state.isOpen && {selectedItem: null, inputValue: ''}),\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      const {isOpen} = this.getState()\n\n      if (!isOpen) {\n        return\n      }\n\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting downwards from 0 if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        1,\n        0,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      const {isOpen} = this.getState()\n\n      if (!isOpen) {\n        return\n      }\n\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting upwards from last index if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        -1,\n        itemCount - 1,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(onChangeText, onInput, text =>\n          this.inputHandleChange({nativeEvent: {text}}),\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        this._rootNode &&\n        this._rootNode.contains(this.props.environment.document.activeElement)\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: handleRefs(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status, this.props.environment.document)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      const {environment} = this.props\n\n      environment.addEventListener('mousedown', onMouseDown)\n      environment.addEventListener('mouseup', onMouseUp)\n      environment.addEventListener('touchstart', onTouchStart)\n      environment.addEventListener('touchmove', onTouchMove)\n      environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        environment.removeEventListener('mousedown', onMouseDown)\n        environment.removeEventListener('mouseup', onMouseUp)\n        environment.removeEventListener('touchstart', onTouchStart)\n        environment.removeEventListener('touchmove', onTouchMove)\n        environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(this.state, prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      isControlledProp(this.props, 'selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return cloneElement(element, this.getRootProps(getElementProps(element)))\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import {\n  useRef,\n  useCallback,\n  useReducer,\n  useEffect,\n  useLayoutEffect,\n} from 'react'\nimport {\n  scrollIntoView,\n  getNextWrappingIndex,\n  getState,\n  generateId,\n  debounce,\n  targetWithinDownshift,\n  validateControlledUnchanged,\n  noop,\n} from '../utils'\nimport setStatus from '../set-a11y-status'\n\nconst dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: '',\n}\n\nfunction callOnChangeProps(action, state, newState) {\n  const {props, type} = action\n  const changes = {}\n\n  Object.keys(state).forEach(key => {\n    invokeOnChangeHandler(key, action, state, newState)\n\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key]\n    }\n  })\n\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange({type, ...changes})\n  }\n}\n\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  const {props, type} = action\n  const handler = `on${capitalizeString(key)}Change`\n  if (\n    props[handler] &&\n    newState[key] !== undefined &&\n    newState[key] !== state[key]\n  ) {\n    props[handler]({type, ...newState})\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {selectedItem, itemToString: itemToStringLocal} = selectionParameters\n\n  return selectedItem\n    ? `${itemToStringLocal(selectedItem)} has been selected.`\n    : ''\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nconst updateA11yStatus = debounce((getA11yMessage, document) => {\n  setStatus(getA11yMessage(), document)\n}, 200)\n\n// istanbul ignore next\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? useLayoutEffect\n    : useEffect\n\nfunction useElementIds({\n  id = `downshift-${generateId()}`,\n  labelId,\n  menuId,\n  getItemId,\n  toggleButtonId,\n  inputId,\n}) {\n  const elementIdsRef = useRef({\n    labelId: labelId || `${id}-label`,\n    menuId: menuId || `${id}-menu`,\n    getItemId: getItemId || (index => `${id}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${id}-toggle-button`,\n    inputId: inputId || `${id}-input`,\n  })\n\n  return elementIdsRef.current\n}\n\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index\n  }\n  if (items.length === 0) {\n    return -1\n  }\n  return items.indexOf(item)\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : ''\n}\n\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key)\n}\n\nfunction capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`\n}\n\nfunction useLatestRef(val) {\n  const ref = useRef(val)\n  // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n  ref.current = val\n  return ref\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useEnhancedReducer(reducer, initialState, props) {\n  const prevStateRef = useRef()\n  const actionRef = useRef()\n  const enhancedReducer = useCallback(\n    (state, action) => {\n      actionRef.current = action\n      state = getState(state, action.props)\n\n      const changes = reducer(state, action)\n      const newState = action.props.stateReducer(state, {...action, changes})\n\n      return newState\n    },\n    [reducer],\n  )\n  const [state, dispatch] = useReducer(enhancedReducer, initialState)\n  const propsRef = useLatestRef(props)\n  const dispatchWithProps = useCallback(\n    action => dispatch({props: propsRef.current, ...action}),\n    [propsRef],\n  )\n  const action = actionRef.current\n\n  useEffect(() => {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(\n        action,\n        getState(prevStateRef.current, action.props),\n        state,\n      )\n    }\n\n    prevStateRef.current = state\n  }, [state, props, action])\n\n  return [state, dispatchWithProps]\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer(reducer, initialState, props) {\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props)\n\n  return [getState(state, props), dispatch]\n}\n\nconst defaultProps = {\n  itemToString,\n  stateReducer,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  circularNavigation: false,\n  environment:\n    typeof window === 'undefined' /* istanbul ignore next (ssr) */\n      ? {}\n      : window,\n}\n\nfunction getDefaultValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  const defaultPropKey = `default${capitalizeString(propKey)}`\n\n  if (defaultPropKey in props) {\n    return props[defaultPropKey]\n  }\n\n  return defaultStateValues[propKey]\n}\n\nfunction getInitialValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  if (propKey in props) {\n    return props[propKey]\n  }\n\n  const initialPropKey = `initial${capitalizeString(propKey)}`\n\n  if (initialPropKey in props) {\n    return props[initialPropKey]\n  }\n  return getDefaultValue(props, propKey, defaultStateValues)\n}\n\nfunction getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const isOpen = getInitialValue(props, 'isOpen')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n  const inputValue = getInitialValue(props, 'inputValue')\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem && isOpen\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nfunction getHighlightedIndexOnOpen(props, state, offset, getItemNodeFromIndex) {\n  const {items, initialHighlightedIndex, defaultHighlightedIndex} = props\n  const {selectedItem, highlightedIndex} = state\n\n  if (items.length === 0) {\n    return -1\n  }\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (\n    initialHighlightedIndex !== undefined &&\n    highlightedIndex === initialHighlightedIndex\n  ) {\n    return initialHighlightedIndex\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex\n  }\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem)\n    }\n    return getNextWrappingIndex(\n      offset,\n      items.indexOf(selectedItem),\n      items.length,\n      getItemNodeFromIndex,\n      false,\n    )\n  }\n  if (offset === 0) {\n    return -1\n  }\n  return offset < 0 ? items.length - 1 : 0\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nfunction useMouseAndTouchTracker(\n  isOpen,\n  downshiftElementRefs,\n  environment,\n  handleBlur,\n) {\n  const mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false,\n  })\n\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackersRef.current.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      mouseAndTouchTrackersRef.current.isMouseDown = false\n      if (\n        isOpen &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n    const onTouchStart = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = false\n    }\n    const onTouchMove = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = true\n    }\n    const onTouchEnd = event => {\n      if (\n        isOpen &&\n        !mouseAndTouchTrackersRef.current.isTouchMove &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n          false,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n\n    environment.addEventListener('mousedown', onMouseDown)\n    environment.addEventListener('mouseup', onMouseUp)\n    environment.addEventListener('touchstart', onTouchStart)\n    environment.addEventListener('touchmove', onTouchMove)\n    environment.addEventListener('touchend', onTouchEnd)\n\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown)\n      environment.removeEventListener('mouseup', onMouseUp)\n      environment.removeEventListener('touchstart', onTouchStart)\n      environment.removeEventListener('touchmove', onTouchMove)\n      environment.removeEventListener('touchend', onTouchEnd)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment])\n\n  return mouseAndTouchTrackersRef\n}\n\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\nlet useGetterPropsCalledChecker = () => noop\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = (...propKeys) => {\n    const isInitialMountRef = useRef(true)\n    const getterPropsCalledRef = useRef(\n      propKeys.reduce((acc, propKey) => {\n        acc[propKey] = {}\n        return acc\n      }, {}),\n    )\n\n    useEffect(() => {\n      Object.keys(getterPropsCalledRef.current).forEach(propKey => {\n        const propCallInfo = getterPropsCalledRef.current[propKey]\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(\n              `downshift: You forgot to call the ${propKey} getter function on your component / element.`,\n            )\n            return\n          }\n        }\n\n        const {suppressRefError, refKey, elementRef} = propCallInfo\n\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `downshift: The ref prop \"${refKey}\" from ${propKey} was not applied correctly on your element.`,\n          )\n        }\n      })\n\n      isInitialMountRef.current = false\n    })\n\n    const setGetterPropCallInfo = useCallback(\n      (propKey, suppressRefError, refKey, elementRef) => {\n        getterPropsCalledRef.current[propKey] = {\n          suppressRefError,\n          refKey,\n          elementRef,\n        }\n      },\n      [],\n    )\n\n    return setGetterPropCallInfo\n  }\n}\n\nfunction useA11yMessageSetter(\n  getA11yMessage,\n  dependencyArray,\n  {isInitialMount, highlightedIndex, items, environment, ...rest},\n) {\n  // Sets a11y status message on changes in state.\n  useEffect(() => {\n    if (isInitialMount) {\n      return\n    }\n\n    updateA11yStatus(\n      () =>\n        getA11yMessage({\n          highlightedIndex,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          ...rest,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray)\n}\n\nfunction useScrollIntoView({\n  highlightedIndex,\n  isOpen,\n  itemRefs,\n  getItemNodeFromIndex,\n  menuElement,\n  scrollIntoView: scrollIntoViewProp,\n}) {\n  // used not to scroll on highlight by mouse.\n  const shouldScrollRef = useRef(true)\n  // Scroll on highlighted item if change comes from keyboard.\n  useIsomorphicLayoutEffect(() => {\n    if (\n      highlightedIndex < 0 ||\n      !isOpen ||\n      !Object.keys(itemRefs.current).length\n    ) {\n      return\n    }\n\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n\n  return shouldScrollRef\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet useControlPropsValidator = noop\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = ({isInitialMount, props, state}) => {\n    // used for checking when props are moving from controlled to uncontrolled.\n    const prevPropsRef = useRef(props)\n\n    useEffect(() => {\n      if (isInitialMount) {\n        return\n      }\n\n      validateControlledUnchanged(state, prevPropsRef.current, props)\n      prevPropsRef.current = props\n    }, [state, props, isInitialMount])\n  }\n}\n\nexport {\n  useControlPropsValidator,\n  useScrollIntoView,\n  useA11yMessageSetter,\n  useGetterPropsCalledChecker,\n  useMouseAndTouchTracker,\n  getHighlightedIndexOnOpen,\n  getInitialState,\n  getInitialValue,\n  getDefaultValue,\n  defaultProps,\n  useControlledReducer,\n  useEnhancedReducer,\n  useLatestRef,\n  capitalizeString,\n  isAcceptedCharacterKey,\n  getItemIndex,\n  useElementIds,\n}\n","import {getHighlightedIndexOnOpen, getDefaultValue} from './utils'\n\n/* eslint-disable complexity */\nexport default function downshiftCommonReducer(state, action, stateChangeTypes) {\n  const {type, props} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","import PropTypes from 'prop-types'\nimport {defaultProps as commonDefaultProps} from '../utils'\nimport {noop} from '../../utils'\n\nfunction getItemIndexByCharacterKey(\n  keysSoFar,\n  highlightedIndex,\n  items,\n  itemToString,\n  getItemNodeFromIndex,\n) {\n  const lowerCasedKeysSoFar = keysSoFar.toLowerCase()\n\n  for (let index = 0; index < items.length; index++) {\n    const offsetIndex = (index + highlightedIndex + 1) % items.length\n\n    if (\n      itemToString(items[offsetIndex])\n        .toLowerCase()\n        .startsWith(lowerCasedKeysSoFar)\n    ) {\n      const element = getItemNodeFromIndex(offsetIndex)\n\n      if (!(element && element.hasAttribute('disabled'))) {\n        return offsetIndex\n      }\n    }\n  }\n\n  return highlightedIndex\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.`\n  }\n\n  return ''\n}\n\nconst defaultProps = {\n  ...commonDefaultProps,\n  getA11yStatusMessage,\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validatePropTypes = noop\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name)\n  }\n}\n\nexport {getItemIndexByCharacterKey, defaultProps, validatePropTypes}\n","import {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport commonReducer from '../reducer'\nimport {getItemIndexByCharacterKey} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftSelectReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const itemIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(itemIndex >= 0 && {\n            selectedItem: props.items[itemIndex],\n          }),\n        }\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          -1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnter:\n    case stateChangeTypes.MenuKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const highlightedIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.highlightedIndex,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(highlightedIndex >= 0 && {\n            highlightedIndex,\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? 5 : 1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? -5 : -1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n      break\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n\n      break\n    default:\n      return commonReducer(state, action, stateChangeTypes)\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect, useCallback, useMemo} from 'react'\nimport {\n  getItemIndex,\n  isAcceptedCharacterKey,\n  useControlledReducer,\n  getInitialState,\n  useMouseAndTouchTracker,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n  useA11yMessageSetter,\n  useScrollIntoView,\n  useControlPropsValidator,\n  useElementIds,\n} from '../utils'\nimport {\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  normalizeArrowKey,\n} from '../../utils'\nimport downshiftSelectReducer from './reducer'\nimport {validatePropTypes, defaultProps} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nuseSelect.stateChangeTypes = stateChangeTypes\n\nfunction useSelect(userProps = {}) {\n  validatePropTypes(userProps, useSelect)\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    items,\n    scrollIntoView,\n    environment,\n    initialIsOpen,\n    defaultIsOpen,\n    itemToString,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n  const [state, dispatch] = useControlledReducer(\n    downshiftSelectReducer,\n    initialState,\n    props,\n  )\n  const {isOpen, highlightedIndex, selectedItem, inputValue} = state\n\n  // Element efs.\n  const toggleButtonRef = useRef(null)\n  const menuRef = useRef(null)\n  const itemRefs = useRef({})\n  // used not to trigger menu blur action in some scenarios.\n  const shouldBlurRef = useRef(true)\n  // used to keep the inputValue clearTimeout object between renders.\n  const clearTimeoutRef = useRef(null)\n  // prevent id re-generation between renders.\n  const elementIds = useElementIds(props)\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef()\n  const isInitialMountRef = useRef(true)\n  // utility callback to get item element.\n  const latest = useLatestRef({\n    state,\n    props,\n  })\n\n  // Some utils.\n  const getItemNodeFromIndex = useCallback(\n    index => itemRefs.current[elementIds.getItemId(index)],\n    [elementIds],\n  )\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(\n    getA11yStatusMessage,\n    [isOpen, highlightedIndex, inputValue, items],\n    {\n      isInitialMount: isInitialMountRef.current,\n      previousResultCount: previousResultCountRef.current,\n      items,\n      environment,\n      itemToString,\n      ...state,\n    },\n  )\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state,\n  })\n  // Scroll on highlighted item if change comes from keyboard.\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex,\n  })\n  // Sets cleanup for the keysSoFar after 500ms.\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    if (isInitialMountRef.current) {\n      clearTimeoutRef.current = debounce(outerDispatch => {\n        outerDispatch({\n          type: stateChangeTypes.FunctionSetInputValue,\n          inputValue: '',\n        })\n      }, 500)\n    }\n\n    if (!inputValue) {\n      return\n    }\n    clearTimeoutRef.current(dispatch)\n  }, [dispatch, inputValue])\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state,\n  })\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMountRef.current) {\n      // Unless it was initialised as open.\n      if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus menu on open.\n    if (isOpen) {\n      // istanbul ignore else\n      if (menuRef.current) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus toggleButton on close, but not if it was closed with (Shift+)Tab.\n    if (environment.document.activeElement === menuRef.current) {\n      // istanbul ignore else\n      if (toggleButtonRef.current) {\n        shouldBlurRef.current = false\n        toggleButtonRef.current.focus()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.MenuBlur,\n      })\n    },\n  )\n  const setGetterPropCallInfo = useGetterPropsCalledChecker(\n    'getMenuProps',\n    'getToggleButtonProps',\n  )\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n  // Reset itemRefs on close.\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {}\n    }\n  }, [isOpen])\n\n  // Event handler functions.\n  const toggleButtonKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.ToggleButtonKeyDownArrowDown,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.ToggleButtonKeyDownArrowUp,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n    }),\n    [dispatch, getItemNodeFromIndex],\n  )\n  const menuKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownArrowDown,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownArrowUp,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      Home(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownHome,\n          getItemNodeFromIndex,\n        })\n      },\n      End(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEnd,\n          getItemNodeFromIndex,\n        })\n      },\n      Escape() {\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEscape,\n        })\n      },\n      Enter(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEnter,\n        })\n      },\n      ' '(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownSpaceButton,\n        })\n      },\n    }),\n    [dispatch, getItemNodeFromIndex],\n  )\n\n  // Action functions.\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }, [dispatch])\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }, [dispatch])\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }, [dispatch])\n  const setHighlightedIndex = useCallback(\n    newHighlightedIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetHighlightedIndex,\n        highlightedIndex: newHighlightedIndex,\n      })\n    },\n    [dispatch],\n  )\n  const selectItem = useCallback(\n    newSelectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionSelectItem,\n        selectedItem: newSelectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n  const setInputValue = useCallback(\n    newInputValue => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetInputValue,\n        inputValue: newInputValue,\n      })\n    },\n    [dispatch],\n  )\n  // Getter functions.\n  const getLabelProps = useCallback(\n    labelProps => ({\n      id: elementIds.labelId,\n      htmlFor: elementIds.toggleButtonId,\n      ...labelProps,\n    }),\n    [elementIds],\n  )\n  const getMenuProps = useCallback(\n    (\n      {onMouseLeave, refKey = 'ref', onKeyDown, onBlur, ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      const latestState = latest.current.state\n      const menuHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && menuKeyDownHandlers[key]) {\n          menuKeyDownHandlers[key](event)\n        } else if (isAcceptedCharacterKey(key)) {\n          dispatch({\n            type: stateChangeTypes.MenuKeyDownCharacter,\n            key,\n            getItemNodeFromIndex,\n          })\n        }\n      }\n      const menuHandleBlur = () => {\n        // if the blur was a result of selection, we don't trigger this action.\n        if (shouldBlurRef.current === false) {\n          shouldBlurRef.current = true\n          return\n        }\n\n        const shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown\n        /* istanbul ignore else */\n        if (shouldBlur) {\n          dispatch({type: stateChangeTypes.MenuBlur})\n        }\n      }\n      const menuHandleMouseLeave = () => {\n        dispatch({\n          type: stateChangeTypes.MenuMouseLeave,\n        })\n      }\n\n      setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef)\n\n      return {\n        [refKey]: handleRefs(ref, menuNode => {\n          menuRef.current = menuNode\n        }),\n        id: elementIds.menuId,\n        role: 'listbox',\n        'aria-labelledby': elementIds.labelId,\n        tabIndex: -1,\n        ...(latestState.isOpen &&\n          latestState.highlightedIndex > -1 && {\n            'aria-activedescendant': elementIds.getItemId(\n              latestState.highlightedIndex,\n            ),\n          }),\n        onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n        onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, menuHandleBlur),\n        ...rest,\n      }\n    },\n    [\n      dispatch,\n      latest,\n      menuKeyDownHandlers,\n      mouseAndTouchTrackersRef,\n      setGetterPropCallInfo,\n      elementIds,\n      getItemNodeFromIndex,\n    ],\n  )\n  const getToggleButtonProps = useCallback(\n    (\n      {onClick, onKeyDown, refKey = 'ref', ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      const toggleButtonHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ToggleButtonClick,\n        })\n      }\n      const toggleButtonHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && toggleButtonKeyDownHandlers[key]) {\n          toggleButtonKeyDownHandlers[key](event)\n        } else if (isAcceptedCharacterKey(key)) {\n          dispatch({\n            type: stateChangeTypes.ToggleButtonKeyDownCharacter,\n            key,\n            getItemNodeFromIndex,\n          })\n        }\n      }\n      const toggleProps = {\n        [refKey]: handleRefs(ref, toggleButtonNode => {\n          toggleButtonRef.current = toggleButtonNode\n        }),\n        id: elementIds.toggleButtonId,\n        'aria-haspopup': 'listbox',\n        'aria-expanded': latest.current.state.isOpen,\n        'aria-labelledby': `${elementIds.labelId} ${elementIds.toggleButtonId}`,\n        ...rest,\n      }\n\n      if (!rest.disabled) {\n        toggleProps.onClick = callAllEventHandlers(\n          onClick,\n          toggleButtonHandleClick,\n        )\n        toggleProps.onKeyDown = callAllEventHandlers(\n          onKeyDown,\n          toggleButtonHandleKeyDown,\n        )\n      }\n\n      setGetterPropCallInfo(\n        'getToggleButtonProps',\n        suppressRefError,\n        refKey,\n        toggleButtonRef,\n      )\n\n      return toggleProps\n    },\n    [\n      dispatch,\n      latest,\n      toggleButtonKeyDownHandlers,\n      setGetterPropCallInfo,\n      elementIds,\n      getItemNodeFromIndex,\n    ],\n  )\n  const getItemProps = useCallback(\n    ({\n      item,\n      index,\n      onMouseMove,\n      onClick,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = {}) => {\n      const {state: latestState, props: latestProps} = latest.current\n      const itemHandleMouseMove = () => {\n        if (index === latestState.highlightedIndex) {\n          return\n        }\n        shouldScrollRef.current = false\n        dispatch({\n          type: stateChangeTypes.ItemMouseMove,\n          index,\n        })\n      }\n      const itemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ItemClick,\n          index,\n        })\n      }\n\n      const itemIndex = getItemIndex(index, item, latestProps.items)\n      if (itemIndex < 0) {\n        throw new Error('Pass either item or item index in getItemProps!')\n      }\n      const itemProps = {\n        role: 'option',\n        'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n        id: elementIds.getItemId(itemIndex),\n        [refKey]: handleRefs(ref, itemNode => {\n          if (itemNode) {\n            itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode\n          }\n        }),\n        ...rest,\n      }\n\n      if (!rest.disabled) {\n        itemProps.onMouseMove = callAllEventHandlers(\n          onMouseMove,\n          itemHandleMouseMove,\n        )\n        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick)\n      }\n\n      return itemProps\n    },\n    [dispatch, latest, shouldScrollRef, elementIds],\n  )\n\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    setInputValue,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useSelect\n","import productionEnum from '../../productionEnum.macro'\n\nexport const InputKeyDownArrowDown = productionEnum(\n  '__input_keydown_arrow_down__',\n)\nexport const InputKeyDownArrowUp = productionEnum('__input_keydown_arrow_up__')\nexport const InputKeyDownEscape = productionEnum('__input_keydown_escape__')\nexport const InputKeyDownHome = productionEnum('__input_keydown_home__')\nexport const InputKeyDownEnd = productionEnum('__input_keydown_end__')\nexport const InputKeyDownEnter = productionEnum('__input_keydown_enter__')\nexport const InputChange = productionEnum('__input_change__')\nexport const InputBlur = productionEnum('__input_blur__')\n\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\n\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\n\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\n\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionSetInputValue = productionEnum(\n  '__function_set_input_value__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\nexport const ControlledPropUpdatedSelectedItem = productionEnum(\n  '__controlled_prop_updated_selected_item__',\n)\n","import {useRef, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  getA11yStatusMessage,\n  isControlledProp,\n  getState,\n  noop,\n} from '../../utils'\nimport {\n  defaultProps as defaultPropsCommon,\n  getInitialState as getInitialStateCommon,\n  useEnhancedReducer,\n} from '../utils'\nimport {ControlledPropUpdatedSelectedItem} from './stateChangeTypes'\n\nfunction getInitialState(props) {\n  const initialState = getInitialStateCommon(props)\n  const {selectedItem} = initialState\n  let {inputValue} = initialState\n\n  if (\n    inputValue === '' &&\n    selectedItem &&\n    props.defaultInputValue === undefined &&\n    props.initialInputValue === undefined &&\n    props.inputValue === undefined\n  ) {\n    inputValue = props.itemToString(selectedItem)\n  }\n\n  return {\n    ...initialState,\n    inputValue,\n  }\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer(reducer, initialState, props) {\n  const previousSelectedItemRef = useRef()\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props)\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  useEffect(() => {\n    if (isControlledProp(props, 'selectedItem')) {\n      if (previousSelectedItemRef.current !== props.selectedItem) {\n        dispatch({\n          type: ControlledPropUpdatedSelectedItem,\n          inputValue: props.itemToString(props.selectedItem),\n        })\n      }\n\n      previousSelectedItemRef.current =\n        state.selectedItem === previousSelectedItemRef.current\n          ? props.selectedItem\n          : state.selectedItem\n    }\n  })\n\n  return [getState(state, props), dispatch]\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validatePropTypes = noop\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name)\n  }\n}\n\nconst defaultProps = {\n  ...defaultPropsCommon,\n  getA11yStatusMessage,\n  circularNavigation: true,\n}\n\nexport {validatePropTypes, useControlledReducer, getInitialState, defaultProps}\n","import {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport commonReducer from '../reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftUseComboboxReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? 5 : 1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: props.items.length >= 0,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowUp:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? -5 : -1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            -1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: props.items.length >= 0,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnter:\n      changes = {\n        ...(state.isOpen &&\n          state.highlightedIndex >= 0 && {\n            selectedItem: props.items[state.highlightedIndex],\n            isOpen: getDefaultValue(props, 'isOpen'),\n            highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n            inputValue: props.itemToString(props.items[state.highlightedIndex]),\n          }),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(!state.isOpen && {\n          selectedItem: null,\n          inputValue: '',\n        }),\n      }\n      break\n    case stateChangeTypes.InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 &&\n          action.selectItem && {\n            selectedItem: props.items[state.highlightedIndex],\n            inputValue: props.itemToString(props.items[state.highlightedIndex]),\n          }),\n      }\n      break\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem),\n      }\n      break\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue,\n      }\n      break\n    default:\n      return commonReducer(state, action, stateChangeTypes)\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect, useCallback, useMemo} from 'react'\nimport {isPreact, isReactNative} from '../../is.macro'\nimport {handleRefs, normalizeArrowKey, callAllEventHandlers} from '../../utils'\nimport {\n  getItemIndex,\n  useA11yMessageSetter,\n  useMouseAndTouchTracker,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n  useScrollIntoView,\n  useControlPropsValidator,\n  useElementIds,\n} from '../utils'\nimport {\n  getInitialState,\n  defaultProps,\n  useControlledReducer,\n  validatePropTypes,\n} from './utils'\nimport downshiftUseComboboxReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nuseCombobox.stateChangeTypes = stateChangeTypes\n\nfunction useCombobox(userProps = {}) {\n  validatePropTypes(userProps, useCombobox)\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    environment,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    itemToString,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n  const [state, dispatch] = useControlledReducer(\n    downshiftUseComboboxReducer,\n    initialState,\n    props,\n  )\n  const {isOpen, highlightedIndex, selectedItem, inputValue} = state\n\n  // Element refs.\n  const menuRef = useRef(null)\n  const itemRefs = useRef({})\n  const inputRef = useRef(null)\n  const toggleButtonRef = useRef(null)\n  const comboboxRef = useRef(null)\n  const isInitialMountRef = useRef(true)\n  // prevent id re-generation between renders.\n  const elementIds = useElementIds(props)\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef()\n  // utility callback to get item element.\n  const latest = useLatestRef({state, props})\n\n  const getItemNodeFromIndex = useCallback(\n    index => itemRefs.current[elementIds.getItemId(index)],\n    [elementIds],\n  )\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(\n    getA11yStatusMessage,\n    [isOpen, highlightedIndex, inputValue, items],\n    {\n      isInitialMount: isInitialMountRef.current,\n      previousResultCount: previousResultCountRef.current,\n      items,\n      environment,\n      itemToString,\n      ...state,\n    },\n  )\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state,\n  })\n  // Scroll on highlighted item if change comes from keyboard.\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex,\n  })\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state,\n  })\n  // Focus the input on first render if required.\n  useEffect(() => {\n    const focusOnOpen = initialIsOpen || defaultIsOpen || isOpen\n\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [comboboxRef, menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.InputBlur,\n        selectItem: false,\n      })\n    },\n  )\n  const setGetterPropCallInfo = useGetterPropsCalledChecker(\n    'getInputProps',\n    'getComboboxProps',\n    'getMenuProps',\n  )\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n  // Reset itemRefs on close.\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {}\n    }\n  }, [isOpen])\n\n  /* Event handler functions */\n  const inputKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownArrowDown,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownArrowUp,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex,\n        })\n      },\n      Home(event) {\n        if (!latest.current.state.isOpen) {\n          return\n        }\n\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownHome,\n          getItemNodeFromIndex,\n        })\n      },\n      End(event) {\n        if (!latest.current.state.isOpen) {\n          return\n        }\n\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownEnd,\n          getItemNodeFromIndex,\n        })\n      },\n      Escape() {\n        const latestState = latest.current.state\n        if (\n          latestState.isOpen ||\n          latestState.inputValue ||\n          latestState.selectedItem ||\n          latestState.highlightedIndex > -1\n        ) {\n          dispatch({\n            type: stateChangeTypes.InputKeyDownEscape,\n          })\n        }\n      },\n      Enter(event) {\n        const latestState = latest.current.state\n        // if closed or no highlighted index, do nothing.\n        if (\n          !latestState.isOpen ||\n          latestState.highlightedIndex < 0 ||\n          event.which === 229 // if IME composing, wait for next Enter keydown event.\n        ) {\n          return\n        }\n\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownEnter,\n          getItemNodeFromIndex,\n        })\n      },\n    }),\n    [dispatch, latest, getItemNodeFromIndex],\n  )\n\n  // Getter props.\n  const getLabelProps = useCallback(\n    labelProps => ({\n      id: elementIds.labelId,\n      htmlFor: elementIds.inputId,\n      ...labelProps,\n    }),\n    [elementIds],\n  )\n  const getMenuProps = useCallback(\n    (\n      {onMouseLeave, refKey = 'ref', ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef)\n      return {\n        [refKey]: handleRefs(ref, menuNode => {\n          menuRef.current = menuNode\n        }),\n        id: elementIds.menuId,\n        role: 'listbox',\n        'aria-labelledby': elementIds.labelId,\n        onMouseLeave: callAllEventHandlers(onMouseLeave, () => {\n          dispatch({\n            type: stateChangeTypes.MenuMouseLeave,\n          })\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, setGetterPropCallInfo, elementIds],\n  )\n\n  const getItemProps = useCallback(\n    ({\n      item,\n      index,\n      refKey = 'ref',\n      ref,\n      onMouseMove,\n      onClick,\n      onPress,\n      ...rest\n    } = {}) => {\n      const {props: latestProps, state: latestState} = latest.current\n      const itemIndex = getItemIndex(index, item, latestProps.items)\n      if (itemIndex < 0) {\n        throw new Error('Pass either item or item index in getItemProps!')\n      }\n\n      const onSelectKey = isReactNative\n        ? /* istanbul ignore next (react-native) */ 'onPress'\n        : 'onClick'\n      const customClickHandler = isReactNative\n        ? /* istanbul ignore next (react-native) */ onPress\n        : onClick\n\n      const itemHandleMouseMove = () => {\n        if (index === latestState.highlightedIndex) {\n          return\n        }\n        shouldScrollRef.current = false\n        dispatch({\n          type: stateChangeTypes.ItemMouseMove,\n          index,\n        })\n      }\n      const itemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ItemClick,\n          index,\n        })\n\n        if (inputRef.current) {\n          inputRef.current.focus()\n        }\n      }\n\n      return {\n        [refKey]: handleRefs(ref, itemNode => {\n          if (itemNode) {\n            itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode\n          }\n        }),\n        role: 'option',\n        'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n        id: elementIds.getItemId(itemIndex),\n        ...(!rest.disabled && {\n          onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n          [onSelectKey]: callAllEventHandlers(\n            customClickHandler,\n            itemHandleClick,\n          ),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, latest, shouldScrollRef, elementIds],\n  )\n\n  const getToggleButtonProps = useCallback(\n    ({onClick, onPress, refKey = 'ref', ref, ...rest} = {}) => {\n      const toggleButtonHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ToggleButtonClick,\n        })\n\n        if (!latest.current.state.isOpen && inputRef.current) {\n          inputRef.current.focus()\n        }\n      }\n\n      return {\n        [refKey]: handleRefs(ref, toggleButtonNode => {\n          toggleButtonRef.current = toggleButtonNode\n        }),\n        id: elementIds.toggleButtonId,\n        tabIndex: -1,\n        ...(!rest.disabled && {\n          ...(isReactNative\n            ? /* istanbul ignore next (react-native) */ {\n                onPress: callAllEventHandlers(onPress, toggleButtonHandleClick),\n              }\n            : {\n                onClick: callAllEventHandlers(onClick, toggleButtonHandleClick),\n              }),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, latest, elementIds],\n  )\n  const getInputProps = useCallback(\n    (\n      {\n        onKeyDown,\n        onChange,\n        onInput,\n        onBlur,\n        onChangeText,\n        refKey = 'ref',\n        ref,\n        ...rest\n      } = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef)\n\n      const latestState = latest.current.state\n      const inputHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && inputKeyDownHandlers[key]) {\n          inputKeyDownHandlers[key](event)\n        }\n      }\n      const inputHandleChange = event => {\n        dispatch({\n          type: stateChangeTypes.InputChange,\n          inputValue: isReactNative\n            ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n            : event.target.value,\n        })\n      }\n      const inputHandleBlur = () => {\n        /* istanbul ignore else */\n        if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n          dispatch({\n            type: stateChangeTypes.InputBlur,\n            selectItem: true,\n          })\n        }\n      }\n\n      /* istanbul ignore next (preact) */\n      const onChangeKey = isPreact ? 'onInput' : 'onChange'\n      let eventHandlers = {}\n\n      if (!rest.disabled) {\n        eventHandlers = {\n          [onChangeKey]: callAllEventHandlers(\n            onChange,\n            onInput,\n            inputHandleChange,\n          ),\n          onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n          onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n        }\n      }\n\n      /* istanbul ignore if (react-native) */\n      if (isReactNative) {\n        eventHandlers.onChange = callAllEventHandlers(\n          onChange,\n          onInput,\n          inputHandleChange,\n        )\n        eventHandlers.onChangeText = callAllEventHandlers(\n          onChangeText,\n          onInput,\n          text => {\n            inputHandleChange({nativeEvent: {text}})\n          },\n        )\n      }\n\n      return {\n        [refKey]: handleRefs(ref, inputNode => {\n          inputRef.current = inputNode\n        }),\n        id: elementIds.inputId,\n        'aria-autocomplete': 'list',\n        'aria-controls': elementIds.menuId,\n        ...(latestState.isOpen &&\n          latestState.highlightedIndex > -1 && {\n            'aria-activedescendant': elementIds.getItemId(\n              latestState.highlightedIndex,\n            ),\n          }),\n        'aria-labelledby': elementIds.labelId,\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n        // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n        autoComplete: 'off',\n        value: latestState.inputValue,\n        ...eventHandlers,\n        ...rest,\n      }\n    },\n    [\n      dispatch,\n      inputKeyDownHandlers,\n      latest,\n      mouseAndTouchTrackersRef,\n      setGetterPropCallInfo,\n      elementIds,\n    ],\n  )\n  const getComboboxProps = useCallback(\n    ({refKey = 'ref', ref, ...rest} = {}, {suppressRefError = false} = {}) => {\n      setGetterPropCallInfo(\n        'getComboboxProps',\n        suppressRefError,\n        refKey,\n        comboboxRef,\n      )\n\n      return {\n        [refKey]: handleRefs(ref, comboboxNode => {\n          comboboxRef.current = comboboxNode\n        }),\n        role: 'combobox',\n        'aria-haspopup': 'listbox',\n        'aria-owns': elementIds.menuId,\n        'aria-expanded': latest.current.state.isOpen,\n        ...rest,\n      }\n    },\n    [latest, setGetterPropCallInfo, elementIds],\n  )\n\n  // returns\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }, [dispatch])\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }, [dispatch])\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }, [dispatch])\n  const setHighlightedIndex = useCallback(\n    newHighlightedIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetHighlightedIndex,\n        highlightedIndex: newHighlightedIndex,\n      })\n    },\n    [dispatch],\n  )\n  const selectItem = useCallback(\n    newSelectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionSelectItem,\n        selectedItem: newSelectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const setInputValue = useCallback(\n    newInputValue => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetInputValue,\n        inputValue: newInputValue,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useCombobox\n","import PropTypes from 'prop-types'\nimport {\n  getInitialValue as getInitialValueCommon,\n  getDefaultValue as getDefaultValueCommon,\n  defaultProps as defaultPropsCommon,\n} from '../utils'\nimport {noop} from '../../utils'\n\nconst defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: [],\n}\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nfunction getInitialState(props) {\n  const activeIndex = getInitialValue(props, 'activeIndex')\n  const selectedItems = getInitialValue(props, 'selectedItems')\n\n  return {\n    activeIndex,\n    selectedItems,\n  }\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false\n  }\n\n  const element = event.target\n\n  if (\n    element instanceof HTMLInputElement && // if element is a text input\n    element.value !== '' && // and we have text in it\n    // and cursor is either not at the start or is currently highlighting text.\n    (element.selectionStart !== 0 || element.selectionEnd !== 0)\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  const {\n    removedSelectedItem,\n    itemToString: itemToStringLocal,\n  } = selectionParameters\n\n  return `${itemToStringLocal(removedSelectedItem)} has been removed.`\n}\n\nconst propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nexport const defaultProps = {\n  itemToString: defaultPropsCommon.itemToString,\n  stateReducer: defaultPropsCommon.stateReducer,\n  environment: defaultPropsCommon.environment,\n  getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft',\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validatePropTypes = noop\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name)\n  }\n}\n\nexport {\n  validatePropTypes,\n  getDefaultValue,\n  getInitialState,\n  isKeyDownOperationPermitted,\n}\n","import {getDefaultValue} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftMultipleSelectionReducer(state, action) {\n  const {type, index, props, selectedItem} = action\n  const {activeIndex, selectedItems} = state\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.SelectedItemClick:\n      changes = {\n        activeIndex: index,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex:\n          activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownBackspace:\n    case stateChangeTypes.SelectedItemKeyDownDelete: {\n      let newActiveIndex = activeIndex\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (activeIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, activeIndex),\n          ...selectedItems.slice(activeIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n\n      break\n    }\n    case stateChangeTypes.DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1,\n      }\n      break\n    case stateChangeTypes.DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1),\n      }\n      break\n    case stateChangeTypes.FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [...selectedItems, selectedItem],\n      }\n      break\n    case stateChangeTypes.DropdownClick:\n      changes = {\n        activeIndex: -1,\n      }\n      break\n    case stateChangeTypes.FunctionRemoveSelectedItem: {\n      let newActiveIndex = activeIndex\n      const selectedItemIndex = selectedItems.indexOf(selectedItem)\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (selectedItemIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, selectedItemIndex),\n          ...selectedItems.slice(selectedItemIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetSelectedItems: {\n      const {selectedItems: newSelectedItems} = action\n      changes = {\n        selectedItems: newSelectedItems,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetActiveIndex: {\n      const {activeIndex: newActiveIndex} = action\n      changes = {\n        activeIndex: newActiveIndex,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n","import {useRef, useEffect, useCallback, useMemo} from 'react'\nimport setStatus from '../../set-a11y-status'\nimport {handleRefs, callAllEventHandlers, normalizeArrowKey} from '../../utils'\nimport {\n  useControlledReducer,\n  getItemIndex,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n  useControlPropsValidator,\n} from '../utils'\nimport {\n  getInitialState,\n  defaultProps,\n  isKeyDownOperationPermitted,\n  validatePropTypes\n} from './utils'\nimport downshiftMultipleSelectionReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nuseMultipleSelection.stateChangeTypes = stateChangeTypes\n\nfunction useMultipleSelection(userProps = {}) {\n  validatePropTypes(userProps, useMultipleSelection)\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    getA11yRemovalMessage,\n    itemToString,\n    environment,\n    keyNavigationNext,\n    keyNavigationPrevious,\n  } = props\n\n  // Reducer init.\n  const [state, dispatch] = useControlledReducer(\n    downshiftMultipleSelectionReducer,\n    getInitialState(props),\n    props,\n  )\n  const {activeIndex, selectedItems} = state\n\n  // Refs.\n  const isInitialMountRef = useRef(true)\n  const dropdownRef = useRef(null)\n  const previousSelectedItemsRef = useRef(selectedItems)\n  const selectedItemRefs = useRef()\n  selectedItemRefs.current = []\n  const latest = useLatestRef({state, props})\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      const removedSelectedItem = previousSelectedItemsRef.current.find(\n        item => selectedItems.indexOf(item) < 0,\n      )\n\n      setStatus(\n        getA11yRemovalMessage({\n          itemToString,\n          resultCount: selectedItems.length,\n          removedSelectedItem,\n          activeIndex,\n          activeSelectedItem: selectedItems[activeIndex],\n        }),\n        environment.document,\n      )\n    }\n\n    previousSelectedItemsRef.current = selectedItems\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length])\n  // Sets focus on active item.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus()\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus()\n    }\n  }, [activeIndex])\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state,\n  })\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps')\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n\n  // Event handler functions.\n  const selectedItemKeyDownHandlers = useMemo(\n    () => ({\n      [keyNavigationPrevious]() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownNavigationPrevious,\n        })\n      },\n      [keyNavigationNext]() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownNavigationNext,\n        })\n      },\n      Delete() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownDelete,\n        })\n      },\n      Backspace() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownBackspace,\n        })\n      },\n    }),\n    [dispatch, keyNavigationNext, keyNavigationPrevious],\n  )\n  const dropdownKeyDownHandlers = useMemo(\n    () => ({\n      [keyNavigationPrevious](event) {\n        if (isKeyDownOperationPermitted(event)) {\n          dispatch({\n            type: stateChangeTypes.DropdownKeyDownNavigationPrevious,\n          })\n        }\n      },\n      Backspace(event) {\n        if (isKeyDownOperationPermitted(event)) {\n          dispatch({\n            type: stateChangeTypes.DropdownKeyDownBackspace,\n          })\n        }\n      },\n    }),\n    [dispatch, keyNavigationPrevious],\n  )\n\n  // Getter props.\n  const getSelectedItemProps = useCallback(\n    ({\n      refKey = 'ref',\n      ref,\n      onClick,\n      onKeyDown,\n      selectedItem,\n      index,\n      ...rest\n    } = {}) => {\n      const {state: latestState} = latest.current\n      const itemIndex = getItemIndex(\n        index,\n        selectedItem,\n        latestState.selectedItems,\n      )\n      if (itemIndex < 0) {\n        throw new Error(\n          'Pass either selectedItem or index in getSelectedItemProps!',\n        )\n      }\n\n      const selectedItemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.SelectedItemClick,\n          index,\n        })\n      }\n      const selectedItemHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && selectedItemKeyDownHandlers[key]) {\n          selectedItemKeyDownHandlers[key](event)\n        }\n      }\n\n      return {\n        [refKey]: handleRefs(ref, selectedItemNode => {\n          if (selectedItemNode) {\n            selectedItemRefs.current.push(selectedItemNode)\n          }\n        }),\n        tabIndex: index === latestState.activeIndex ? 0 : -1,\n        onClick: callAllEventHandlers(onClick, selectedItemHandleClick),\n        onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),\n        ...rest,\n      }\n    },\n    [dispatch, latest, selectedItemKeyDownHandlers],\n  )\n  const getDropdownProps = useCallback(\n    (\n      {\n        refKey = 'ref',\n        ref,\n        onKeyDown,\n        onClick,\n        preventKeyAction = false,\n        ...rest\n      } = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo(\n        'getDropdownProps',\n        suppressRefError,\n        refKey,\n        dropdownRef,\n      )\n\n      const dropdownHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && dropdownKeyDownHandlers[key]) {\n          dropdownKeyDownHandlers[key](event)\n        }\n      }\n      const dropdownHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.DropdownClick,\n        })\n      }\n\n      return {\n        [refKey]: handleRefs(ref, dropdownNode => {\n          if (dropdownNode) {\n            dropdownRef.current = dropdownNode\n          }\n        }),\n        ...(!preventKeyAction && {\n          onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n          onClick: callAllEventHandlers(onClick, dropdownHandleClick),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo],\n  )\n\n  // returns\n  const addSelectedItem = useCallback(\n    selectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionAddSelectedItem,\n        selectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const removeSelectedItem = useCallback(\n    selectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionRemoveSelectedItem,\n        selectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const setSelectedItems = useCallback(\n    newSelectedItems => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetSelectedItems,\n        selectedItems: newSelectedItems,\n      })\n    },\n    [dispatch],\n  )\n  const setActiveIndex = useCallback(\n    newActiveIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetActiveIndex,\n        activeIndex: newActiveIndex,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n\n  return {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    setSelectedItems,\n    setActiveIndex,\n    reset,\n    selectedItems,\n    activeIndex,\n  }\n}\n\nexport default useMultipleSelection\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","b","c","d","e","f","g","h","k","l","m","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","type","module","require$$0","isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","style","getComputedStyle","overflowY","overflowX","frame","ownerDocument","defaultView","frameElement","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","idCounter","cbToCb","cb","noop","scrollIntoView","node","menuNode","options","windowWithViewport","window","scrollMode","block","inline","boundary","checkBoundary","TypeError","scrollingElement","document","documentElement","frames","cursor","parentNode","push","body","viewportWidth","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","computeScrollIntoView","forEach","isOrContainsNode","parent","child","Node","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","args","setTimeout","callAllEventHandlers","fns","event","some","preventDownshiftDefault","nativeEvent","handleRefs","refs","ref","current","generateId","String","getA11yStatusMessage","isOpen","resultCount","previousResultCount","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","getState","props","reduce","prevState","isControlledProp","undefined","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","targetWithinDownshift","downshiftElements","checkActiveElement","contextNode","activeElement","cleanupStatus","documentProp","getStatusDiv","textContent","setStatus","status","div","statusDiv","getElementById","createElement","setAttribute","border","clip","margin","padding","position","appendChild","Downshift","subClass","superClass","_Component","id","_this","menuId","labelId","inputId","getItemId","input","items","timeoutIds","internalSetTimeout","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","onStateChange","onSelect","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","_this2","getItemCount","nextHighlightedIndex","ArrowUp","_this3","Enter","which","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","newHighlightedIndex","_this4","End","_this5","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","value","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","highlightedItem","setA11yStatus","initialHighlightedIndex","initialIsOpen","initialInputValue","initialSelectedItem","create","constructor","__proto__","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","_this6","componentDidMount","_this7","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","element","nodeName","isDOMElement","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","stateChangeTypes","dropdownDefaultStateValues","callOnChangeProps","action","newState","changes","handler","capitalizeString","invokeOnChangeHandler","updateA11yStatus","getA11yMessage","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useElementIds","toggleButtonId","useRef","getItemIndex","isAcceptedCharacterKey","test","string","slice","toUpperCase","useLatestRef","val","useEnhancedReducer","reducer","initialState","prevStateRef","actionRef","enhancedReducer","useCallback","useReducer","dispatch","propsRef","dispatchWithProps","useControlledReducer","s","getA11ySelectionMessage","selectionParameters","itemToStringLocal","circularNavigation","getDefaultValue","propKey","defaultStateValues","defaultPropKey","getInitialValue","initialPropKey","getInitialState","getHighlightedIndexOnOpen","offset","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","map","useGetterPropsCalledChecker","useA11yMessageSetter","dependencyArray","isInitialMount","useScrollIntoView","itemRefs","menuElement","scrollIntoViewProp","shouldScrollRef","useControlPropsValidator","downshiftCommonReducer","ItemMouseMove","MenuMouseLeave","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSetInputValue","FunctionReset","Error","getItemIndexByCharacterKey","keysSoFar","lowerCasedKeysSoFar","toLowerCase","offsetIndex","startsWith","PropTypes","array","isRequired","func","bool","number","any","shape","commonDefaultProps","downshiftSelectReducer","lowercasedKey","commonReducer","useSelect","userProps","toggleButtonRef","shouldBlurRef","clearTimeoutRef","elementIds","previousResultCountRef","isInitialMountRef","latest","outerDispatch","setGetterPropCallInfo","toggleButtonKeyDownHandlers","useMemo","menuKeyDownHandlers","newSelectedItem","setInputValue","newInputValue","labelProps","onMouseLeave","latestState","tabIndex","toggleProps","toggleButtonNode","latestProps","itemProps","defaultPropsCommon","downshiftUseComboboxReducer","useCombobox","previousSelectedItemRef","getInitialStateCommon","defaultInputValue","inputRef","comboboxRef","inputNode","getComboboxProps","comboboxNode","activeIndex","selectedItems","getInitialValueCommon","getDefaultValueCommon","isKeyDownOperationPermitted","metaKey","ctrlKey","altKey","HTMLInputElement","selectionStart","selectionEnd","getA11yRemovalMessage","removedSelectedItem","keyNavigationNext","keyNavigationPrevious","downshiftMultipleSelectionReducer","newActiveIndex","selectedItemIndex","useMultipleSelection","dropdownRef","previousSelectedItemsRef","selectedItemRefs","find","activeSelectedItem","selectedItemKeyDownHandlers","Delete","Backspace","dropdownKeyDownHandlers","getSelectedItemProps","selectedItemNode","getDropdownProps","preventKeyAction","dropdownNode","addSelectedItem","removeSelectedItem","setSelectedItems","newSelectedItems","setActiveIndex"],"mappings":"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"}